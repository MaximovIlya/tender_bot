#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é auction_bot
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from auction_bot.db import SessionLocal
from auction_bot.models import User, Tender, TenderAccess, TenderStatus
from sqlalchemy import select

async def test_access_control():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞...")
    
    async with SessionLocal() as session:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ TenderAccess —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            stmt = select(TenderAccess)
            result = await session.execute(stmt)
            access_records = result.scalars().all()
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü–∞ TenderAccess —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø–∏—Å–µ–π: {len(access_records)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            stmt = select(User)
            result = await session.execute(stmt)
            users = result.scalars().all()
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {len(users)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–Ω–¥–µ—Ä—ã
            stmt = select(Tender)
            result = await session.execute(stmt)
            tenders = result.scalars().all()
            print(f"‚úÖ –¢–µ–Ω–¥–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {len(tenders)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            for user in users:
                print(f"   üë§ {user.username} ({user.role}) - {user.org_name or '–ù–µ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'}")
            
            for tender in tenders:
                print(f"   üìã {tender.title} ({tender.status}) - –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä ID: {tender.organizer_id}")
            
            print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
            return 1
    
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(test_access_control())
    sys.exit(exit_code)
