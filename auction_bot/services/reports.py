import asyncio
from datetime import datetime
from typing import List, Optional
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from ..db import SessionLocal
from ..models import Tender, Bid, User, TenderParticipant

class ReportService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∞—É–∫—Ü–∏–æ–Ω–∞–º"""
    
    async def generate_tender_report(self, tender_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ–Ω–¥–µ—Ä—É"""
        async with SessionLocal() as session:
            tender = await session.get(Tender, tender_id)
            if not tender:
                return "–¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
            stmt = select(Bid).where(Bid.tender_id == tender_id).order_by(Bid.created_at)
            result = await session.execute(stmt)
            bids = result.scalars().all()
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            stmt = select(TenderParticipant).where(TenderParticipant.tender_id == tender_id)
            result = await session.execute(stmt)
            participants = result.scalars().all()
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
            report_text = f"üìä –û–¢–ß–ï–¢ –ü–û –ê–£–ö–¶–ò–û–ù–£\n\n"
            report_text += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {tender.title}\n"
            report_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tender.description}\n"
            report_text += f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {tender.start_price} ‚ÇΩ\n"
            report_text += f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {tender.start_at.strftime('%d.%m.%Y %H:%M')}\n"
            report_text += f"üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n"
            report_text += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: {len(bids)}\n"
            report_text += f"üìä –°—Ç–∞—Ç—É—Å: {tender.status}\n\n"
            
            if bids:
                report_text += "üìà –•–û–î –¢–û–†–ì–û–í:\n\n"
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
                participant_map = {}
                for i, participant in enumerate(participants):
                    participant_map[participant.supplier_id] = f"–£—á–∞—Å—Ç–Ω–∏–∫ {i+1}"
                
                for i, bid in enumerate(bids):
                    participant_name = participant_map.get(bid.supplier_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    from zoneinfo import ZoneInfo
                    from datetime import timezone as _tz
                    local_tz = ZoneInfo("Europe/Moscow")
                    bid_time_local = bid.created_at.astimezone(local_tz) if bid.created_at.tzinfo else bid.created_at.replace(tzinfo=_tz.utc).astimezone(local_tz)
                    report_text += (
                        f"{i+1}. {participant_name}\n"
                        f"   üí∞ –¶–µ–Ω–∞: {bid.amount} ‚ÇΩ\n"
                        f"   üìÖ –í—Ä–µ–º—è: {bid_time_local.strftime('%H:%M:%S')}\n\n"
                    )
                
                # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
                winner_bid = min(bids, key=lambda x: x.amount)
                winner = await session.get(User, winner_bid.supplier_id)
                from zoneinfo import ZoneInfo
                from datetime import timezone as _tz
                local_tz = ZoneInfo("Europe/Moscow")
                winner_time_local = winner_bid.created_at.astimezone(local_tz) if winner_bid.created_at.tzinfo else winner_bid.created_at.replace(tzinfo=_tz.utc).astimezone(local_tz)
                report_text += (
                    f"üèÜ :\n"
                    f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {winner.org_name}\n"
                    f"üí∞ –¶–µ–Ω–∞: {winner_bid.amount} ‚ÇΩ\n"
                    f"üìÖ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {winner_time_local.strftime('%H:%M:%S')}\n"
                    f"üìâ –≠–∫–æ–Ω–æ–º–∏—è: {tender.start_price - winner_bid.amount} ‚ÇΩ"
                )
            else:
                report_text += "üìä –ó–∞—è–≤–æ–∫ –Ω–µ –±—ã–ª–æ –ø–æ–¥–∞–Ω–æ."
            
            return report_text
    
    async def generate_detailed_report(self, tender_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        async with SessionLocal() as session:
            tender = await session.get(Tender, tender_id)
            if not tender:
                return "–¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏
            stmt = select(Bid).where(Bid.tender_id == tender_id).order_by(Bid.created_at)
            result = await session.execute(stmt)
            bids = result.scalars().all()
            
            # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            stmt = select(TenderParticipant).where(TenderParticipant.tender_id == tender_id)
            result = await session.execute(stmt)
            participants = result.scalars().all()
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
            report_text = f"üìä –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –ü–û –ê–£–ö–¶–ò–û–ù–£\n\n"
            report_text += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {tender.title}\n"
            report_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tender.description}\n"
            report_text += f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {tender.start_price} ‚ÇΩ\n"
            report_text += f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {tender.start_at.strftime('%d.%m.%Y %H:%M')}\n"
            report_text += f"üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n"
            report_text += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: {len(bids)}\n"
            report_text += f"üìä –°—Ç–∞—Ç—É—Å: {tender.status}\n\n"
            
            # –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            report_text += "üë• –£–ß–ê–°–¢–ù–ò–ö–ò –ê–£–ö–¶–ò–û–ù–ê:\n\n"
            for i, participant in enumerate(participants):
                supplier = await session.get(User, participant.supplier_id)
                if supplier:
                    report_text += (
                        f"{i+1}. {supplier.org_name}\n"
                        f"   üìß –ò–ù–ù: {supplier.inn}\n"
                        f"   üìã –û–ì–†–ù: {supplier.ogrn}\n"
                        f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {supplier.phone}\n"
                        f"   üë§ –§–ò–û: {supplier.fio}\n\n"
                    )
            
            if bids:
                report_text += "üìà –•–û–î –¢–û–†–ì–û–í:\n\n"
                
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                participant_map = {}
                for i, participant in enumerate(participants):
                    participant_map[participant.supplier_id] = f"–£—á–∞—Å—Ç–Ω–∏–∫ {i+1}"
                
                for i, bid in enumerate(bids):
                    participant_name = participant_map.get(bid.supplier_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    supplier = await session.get(User, bid.supplier_id)
                    report_text += (
                        f"{i+1}. {participant_name} ({supplier.org_name if supplier else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'})\n"
                        f"   üí∞ –¶–µ–Ω–∞: {bid.amount} ‚ÇΩ\n"
                        f"   üìÖ –í—Ä–µ–º—è: {bid.created_at.strftime('%H:%M:%S')}\n\n"
                    )
                
                # 
                winner_bid = min(bids, key=lambda x: x.amount)
                winner = await session.get(User, winner_bid.supplier_id)
                report_text += (
                    f"üèÜ :\n"
                    f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {winner.org_name}\n"
                    f"üí∞ –¶–µ–Ω–∞: {winner_bid.amount} ‚ÇΩ\n"
                    f"üìÖ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {winner_bid.created_at.strftime('%H:%M:%S')}\n"
                    f"üìâ –≠–∫–æ–Ω–æ–º–∏—è: {tender.start_price - winner_bid.amount} ‚ÇΩ\n"
                    f"üìß –ò–ù–ù: {winner.inn}\n"
                    f"üìã –û–ì–†–ù: {winner.ogrn}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {winner.phone}\n"
                    f"üë§ –§–ò–û: {winner.fio}"
                )
            else:
                report_text += "üìä –ó–∞—è–≤–æ–∫ –Ω–µ –±—ã–ª–æ –ø–æ–¥–∞–Ω–æ."
            
            return report_text
    
    async def generate_system_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–∏—Å—Ç–µ–º–µ"""
        async with SessionLocal() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            stmt = select(User)
            result = await session.execute(stmt)
            users = result.scalars().all()
            
            total_users = len(users)
            suppliers = len([u for u in users if u.role == "supplier"])
            organizers = len([u for u in users if u.role == "organizer"])
            admins = len([u for u in users if u.role == "admin"])
            banned_users = len([u for u in users if u.banned])
            registered_suppliers = len([u for u in users if u.role == "supplier" and u.org_name])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤
            stmt = select(Tender)
            result = await session.execute(stmt)
            tenders = result.scalars().all()
            
            total_tenders = len(tenders)
            draft_tenders = len([t for t in tenders if t.status == "draft"])
            active_tenders = len([t for t in tenders if t.status == "active"])
            closed_tenders = len([t for t in tenders if t.status == "closed"])
            cancelled_tenders = len([t for t in tenders if t.status == "cancelled"])
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
            stmt = select(Bid)
            result = await session.execute(stmt)
            bids = result.scalars().all()
            
            total_bids = len(bids)
            if bids:
                avg_bid = sum(bid.amount for bid in bids) / len(bids)
                min_bid = min(bid.amount for bid in bids)
                max_bid = max(bid.amount for bid in bids)
            else:
                avg_bid = min_bid = max_bid = 0
            
            report_text = (
                "üìä –û–¢–ß–ï–¢ –ü–û –°–ò–°–¢–ï–ú–ï –ê–£–ö–¶–ò–û–ù–û–í\n\n"
                f"üìÖ –î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
                
                "üë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:\n"
                f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
                f"   ‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: {suppliers}\n"
                f"   ‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã: {organizers}\n"
                f"   ‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admins}\n"
                f"   ‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {banned_users}\n"
                f"   ‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {registered_suppliers}\n\n"
                
                "üìã –¢–ï–ù–î–ï–†–´:\n"
                f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_tenders}\n"
                f"   ‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {draft_tenders}\n"
                f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_tenders}\n"
                f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {closed_tenders}\n"
                f"   ‚Ä¢ –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ: {cancelled_tenders}\n\n"
                
                "üìà –ó–ê–Ø–í–ö–ò:\n"
                f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_bids}\n"
                f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_bid:.2f} ‚ÇΩ\n"
                f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_bid} ‚ÇΩ\n"
                f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {max_bid} ‚ÇΩ\n\n"
                
                "üìä –ê–ö–¢–ò–í–ù–û–°–¢–¨:\n"
                f"   ‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä: {total_tenders / max(suppliers, 1):.1f}\n"
                f"   ‚Ä¢ –ó–∞—è–≤–æ–∫ –Ω–∞ —Ç–µ–Ω–¥–µ—Ä: {total_bids / max(total_tenders, 1):.1f}\n"
                f"   ‚Ä¢ –ó–∞—è–≤–æ–∫ –Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {total_bids / max(registered_suppliers, 1):.1f}"
            )
            
            return report_text
    
    async def generate_user_report(self, user_id: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        async with SessionLocal() as session:
            user = await session.get(User, user_id)
            if not user:
                return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user.role == "organizer":
                stmt = select(Tender).where(Tender.organizer_id == user.id)
                result = await session.execute(stmt)
                user_tenders = result.scalars().all()
                
                report_text = f"üë§ –û–¢–ß–ï–¢ –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ\n\n"
                report_text += f"üÜî Telegram ID: {user.telegram_id}\n"
                report_text += f"üë§ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                report_text += f"üé≠ –†–æ–ª—å: {user.role}\n"
                report_text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n\n"
                
                report_text += f"üìã –¢–ï–ù–î–ï–†–´ –û–†–ì–ê–ù–ò–ó–ê–¢–û–†–ê:\n"
                report_text += f"   ‚Ä¢ –í—Å–µ–≥–æ: {len(user_tenders)}\n"
                
                if user_tenders:
                    draft_count = len([t for t in user_tenders if t.status == "draft"])
                    active_count = len([t for t in user_tenders if t.status == "active"])
                    closed_count = len([t for t in user_tenders if t.status == "closed"])
                    
                    report_text += f"   ‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {draft_count}\n"
                    report_text += f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_count}\n"
                    report_text += f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {closed_count}\n\n"
                    
                    # –î–µ—Ç–∞–ª–∏ –ø–æ —Ç–µ–Ω–¥–µ—Ä–∞–º
                    for tender in user_tenders:
                        report_text += (
                            f"üìã {tender.title}\n"
                            f"   üí∞ –¶–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
                            f"   üìä –°—Ç–∞—Ç—É—Å: {tender.status}\n"
                            f"   üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tender.participants)}\n"
                            f"   üìà –ó–∞—è–≤–æ–∫: {len(tender.bids)}\n\n"
                        )
                else:
                    report_text += "   ‚Ä¢ –¢–µ–Ω–¥–µ—Ä–æ–≤ –Ω–µ—Ç\n"
            
            elif user.role == "supplier":
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–Ω–¥–µ—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫
                stmt = select(TenderParticipant).where(TenderParticipant.supplier_id == user.id)
                result = await session.execute(stmt)
                participations = result.scalars().all()
                
                report_text = f"üë§ –û–¢–ß–ï–¢ –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ\n\n"
                report_text += f"üÜî Telegram ID: {user.telegram_id}\n"
                report_text += f"üë§ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                report_text += f"üé≠ –†–æ–ª—å: {user.role}\n"
                report_text += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user.org_name}\n"
                report_text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n\n"
                
                report_text += f"üèÜ –£–ß–ê–°–¢–ò–ï –í –¢–ï–ù–î–ï–†–ê–•:\n"
                report_text += f"   ‚Ä¢ –í—Å–µ–≥–æ —É—á–∞—Å—Ç–∏–π: {len(participations)}\n"
                
                if participations:
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    stmt = select(Bid).where(Bid.supplier_id == user.id)
                    result = await session.execute(stmt)
                    user_bids = result.scalars().all()
                    
                    report_text += f"   ‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(user_bids)}\n"
                    
                    if user_bids:
                        avg_bid = sum(bid.amount for bid in user_bids) / len(user_bids)
                        min_bid = min(bid.amount for bid in user_bids)
                        report_text += f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_bid:.2f} ‚ÇΩ\n"
                        report_text += f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {min_bid} ‚ÇΩ\n"
                    
                    report_text += "\nüìã –î–ï–¢–ê–õ–ò –£–ß–ê–°–¢–ò–Ø:\n"
                    for participation in participations:
                        tender = await session.get(Tender, participation.tender_id)
                        if tender:
                            report_text += (
                                f"üìã {tender.title}\n"
                                f"   üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
                                f"   üìä –°—Ç–∞—Ç—É—Å: {tender.status}\n"
                                f"   üìÖ –î–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è: {participation.joined_at.strftime('%d.%m.%Y')}\n\n"
                            )
                else:
                    report_text += "   ‚Ä¢ –£—á–∞—Å—Ç–∏–π –Ω–µ—Ç\n"
            
            else:
                report_text = f"üë§ –û–¢–ß–ï–¢ –ü–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ\n\n"
                report_text += f"üÜî Telegram ID: {user.telegram_id}\n"
                report_text += f"üë§ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                report_text += f"üé≠ –†–æ–ª—å: {user.role}\n"
                report_text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n\n"
                report_text += "–î–ª—è –¥–∞–Ω–Ω–æ–π —Ä–æ–ª–∏ –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞."
            
            return report_text
