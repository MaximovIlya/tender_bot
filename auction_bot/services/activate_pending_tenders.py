# tasks.py
import asyncio
import logging
from datetime import datetime, timezone
from ..models import Tender, TenderStatus
from ..db import SessionLocal
from sqlalchemy import select

logger = logging.getLogger(__name__)

async def activate_pending_tenders():
    """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ç–µ–Ω–¥–µ—Ä—ã, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –∏—Ö –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"""
    logger.info("üöÄ –°–µ—Ä–≤–∏—Å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    
    while True:
        try:
            async with SessionLocal() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
                # UTC - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                # –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è - –≤—Ä–µ–º—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã/—á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
                # –í–ê–ñ–ù–û: –í—Ä–µ–º—è –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
                now_utc = datetime.now(timezone.utc)
                now_local = datetime.now()  # –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã
                
                # –ò—â–µ–º —Ç–µ–Ω–¥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏ –≤—Ä–µ–º—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–∞—Å—Ç—É–ø–∏–ª–æ
                # –í—Ä–µ–º—è –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –ø–æ—ç—Ç–æ–º—É —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
                stmt = select(Tender).where(
                    Tender.status == TenderStatus.active_pending.value,
                    Tender.start_at <= now_local
                )
                result = await session.execute(stmt)
                pending_tenders = result.scalars().all()
                
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤")
                logger.info(f"üìÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {now_local.strftime('%d.%m.%Y %H:%M:%S')}")
                logger.info(f"üåç UTC –≤—Ä–µ–º—è: {now_utc.strftime('%d.%m.%Y %H:%M:%S')}")
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {len(pending_tenders)}")

                for tender in pending_tenders:
                    logger.info(f"‚è∞ –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–Ω–¥–µ—Ä '{tender.title}' (–≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {tender.start_at})")
                    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–Ω–¥–µ—Ä
                    tender.status = TenderStatus.active.value
                    tender.current_price = tender.start_price  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                    await session.commit()
                    logger.info(f"‚úÖ –¢–µ–Ω–¥–µ—Ä '{tender.title}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
                    logger.info(f"   üìÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {now_local.strftime('%d.%m.%Y %H:%M:%S')}")
                    logger.info(f"   üåç UTC –≤—Ä–µ–º—è: {now_utc.strftime('%d.%m.%Y %H:%M:%S')}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ activate_pending_tenders: {e}")
            
        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
