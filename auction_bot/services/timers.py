import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict
from zoneinfo import ZoneInfo
from aiogram import Bot
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from ..db import SessionLocal
from ..models import Tender, TenderStatus, Bid, User, TenderParticipant

logger = logging.getLogger(__name__)
local_tz = ZoneInfo("Europe/Moscow")

class AuctionTimer:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.active_timers: Dict[int, asyncio.Task] = {}

    async def start_timer_for_tender(self, tender_id: int, delay_minutes: int = 2):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞"""
        if tender_id in self.active_timers:
            self.active_timers[tender_id].cancel()

        end_time = datetime.now() + timedelta(minutes=delay_minutes)
        task = asyncio.create_task(self._wait_and_close_tender(tender_id, delay_minutes))
        self.active_timers[tender_id] = task

        logger.info(f"‚è± –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}, "
                    f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {delay_minutes} –º–∏–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {end_time.strftime('%d.%m.%Y %H:%M:%S')}")

    async def _wait_and_close_tender(self, tender_id: int, delay_minutes: int):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞"""
        try:
            await asyncio.sleep(delay_minutes * 60)

            async with SessionLocal() as session:
                tender = await session.get(Tender, tender_id, options=[selectinload(Tender.bids)])
                if not tender or tender.status != TenderStatus.active.value:
                    return

                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞, –µ—Å–ª–∏ –Ω–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –Ω–µ–¥–∞–≤–Ω–æ
                if tender.last_bid_at:
                    elapsed = datetime.now() - tender.last_bid_at
                    if elapsed < timedelta(minutes=2):
                        logger.info(f"üîÑ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ–Ω–¥–µ—Ä–µ {tender_id}, —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
                        await self.start_timer_for_tender(tender_id, 2)
                        return

            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–Ω–¥–µ—Ä
            await self._close_tender(tender_id)

        except asyncio.CancelledError:
            logger.info(f"‚èπ –¢–∞–π–º–µ—Ä –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id} –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}: {e}")
        finally:
            self.active_timers.pop(tender_id, None)

    async def _close_tender(self, tender_id: int):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            async with SessionLocal() as session:
                tender = await session.get(Tender, tender_id, options=[selectinload(Tender.bids)])
                if not tender or tender.status != TenderStatus.active.value:
                    return

                tender.status = TenderStatus.closed.value
                await session.commit()

                winner = None
                winner_bid = None

                if tender.bids:
                    # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
                    winner_bid = min(tender.bids, key=lambda x: x.amount)
                    winner = await session.get(User, winner_bid.supplier_id)

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    if winner:
                        try:
                            await self.bot.send_message(
                                winner.telegram_id,
                                f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç–µ–Ω–¥–µ—Ä!\n\n"
                                f"üìã {tender.title}\n"
                                f"üí∞ –í–∞—à–∞ —Ü–µ–Ω–∞: {winner_bid.amount} ‚ÇΩ\n"
                                f"üìÖ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {winner_bid.created_at.astimezone(local_tz).strftime('%H:%M:%S')}\n\n"
                                f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                    await self._notify_participants_about_closure(tender_id, winner.id if winner else None)

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
                    organizer = await session.get(User, tender.organizer_id)
                    if organizer:
                        bids_report = "üìä –•–û–î –¢–û–†–ì–û–í:\n\n"
                        for i, bid in enumerate(tender.bids, start=1):
                            supplier = await session.get(User, bid.supplier_id)
                            org_name = supplier.org_name if supplier else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
                            bids_report += (
                                f"{i}. üè¢ {org_name}\n"
                                f"   üí∞ –¶–µ–Ω–∞: {bid.amount} ‚ÇΩ\n"
                                f"   ‚è∞ –í—Ä–µ–º—è: {bid.created_at.astimezone(local_tz).strftime('%H:%M:%S')}\n\n"
                            )
                        try:
                            await self.bot.send_message(
                                organizer.telegram_id,
                                f"üî¥ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                                f"üìã {tender.title}\n"
                                f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.org_name if winner else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                                f"üí∞ –¶–µ–Ω–∞: {winner_bid.amount} ‚ÇΩ\n\n"
                                f"{bids_report}"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É: {e}")

                else:
                    # –ù–µ—Ç —Å—Ç–∞–≤–æ–∫
                    async with SessionLocal() as session:
                        organizer = await session.get(User, tender.organizer_id)
                        if organizer:
                            try:
                                await self.bot.send_message(
                                    organizer.telegram_id,
                                    f"üî¥ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –∑–∞—è–≤–æ–∫!\n\n"
                                    f"üìã {tender.title}"
                                )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É: {e}")

                logger.info(f"‚úÖ –¢–µ–Ω–¥–µ—Ä {tender.id} –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}: {e}")

    async def _notify_participants_about_closure(self, tender_id: int, winner_id: int = None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞"""
        try:
            async with SessionLocal() as session:
                stmt = select(TenderParticipant).where(TenderParticipant.tender_id == tender_id)
                result = await session.execute(stmt)
                participants = result.scalars().all()

                tender = await session.get(Tender, tender_id)
                winner = await session.get(User, winner_id) if winner_id else None

                closure_text = (
                    f"üî¥ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                    f"üìã {tender.title}\n"
                    f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.org_name if winner else '‚Äî'}\n"
                    f"üí∞ –¶–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
                    f"üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
                )

                for participant in participants:
                    if participant.supplier_id != (winner.id if winner else None):
                        user = await session.get(User, participant.supplier_id)
                        if user:
                            try:
                                await self.bot.send_message(user.telegram_id, closure_text)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")

    async def reset_timer_for_tender(self, tender_id: int):
        """–°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
        if tender_id in self.active_timers:
            self.active_timers[tender_id].cancel()
        logger.info(f"üîÑ –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}")
        await self.start_timer_for_tender(tender_id, 2)

    async def cancel_timer_for_tender(self, tender_id: int):
        """–û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞"""
        if tender_id in self.active_timers:
            self.active_timers[tender_id].cancel()
            self.active_timers.pop(tender_id, None)
            logger.info(f"‚èπ –¢–∞–π–º–µ—Ä –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id} –æ—Ç–º–µ–Ω–µ–Ω")

    async def check_all_active_tenders(self):
        """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤"""
        try:
            async with SessionLocal() as session:
                stmt = select(Tender).where(Tender.status == TenderStatus.active.value)
                result = await session.execute(stmt)
                active_tenders = result.scalars().all()

                for tender in active_tenders:
                    if tender.last_bid_at:
                        elapsed = datetime.now() - tender.last_bid_at
                        if elapsed > timedelta(minutes=2):
                            await self._close_tender(tender.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–Ω–¥–µ—Ä–æ–≤: {e}")

    async def start_periodic_check(self, interval_minutes: int = 1):
        """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ N –º–∏–Ω—É—Ç"""
        while True:
            try:
                await self.check_all_active_tenders()
                await asyncio.sleep(interval_minutes * 60)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
                await asyncio.sleep(60)

    def get_active_timers_count(self) -> int:
        return len(self.active_timers)

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤"""
        for tender_id in list(self.active_timers.keys()):
            await self.cancel_timer_for_tender(tender_id)
        logger.info("–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
