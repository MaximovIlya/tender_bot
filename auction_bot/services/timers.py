import asyncio
from datetime import datetime, timedelta
from typing import Dict, Set
from aiogram import Bot
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from ..db import SessionLocal
from ..models import Tender, TenderStatus, Bid, User, TenderParticipant

class AuctionTimer:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.active_timers: Dict[int, asyncio.Task] = {}
        self.tender_checks: Set[int] = set()
    
    async def start_timer_for_tender(self, tender_id: int, delay_minutes: int = 5):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞"""
        if tender_id in self.active_timers:
            # –û—Ç–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä
            self.active_timers[tender_id].cancel()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        timer_task = asyncio.create_task(
            self._wait_and_close_tender(tender_id, delay_minutes)
        )
        self.active_timers[tender_id] = timer_task
        
        print(f"–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}, –≤—Ä–µ–º—è: {delay_minutes} –º–∏–Ω—É—Ç")
    
    async def _wait_and_close_tender(self, tender_id: int, delay_minutes: int):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞"""
        try:
            await asyncio.sleep(delay_minutes * 60)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º–∏–Ω—É—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—ã
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –ø–æ–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞
            async with SessionLocal() as session:
                tender = await session.get(Tender, tender_id)
                if not tender or tender.status != TenderStatus.active.value:
                    return
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏
                if tender.last_bid_at:
                    time_since_last_bid = datetime.now() - tender.last_bid_at
                    if time_since_last_bid < timedelta(minutes=5):
                        # –ë—ã–ª–∞ –ø–æ–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                        await self.start_timer_for_tender(tender_id, 5)
                        return
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–Ω–¥–µ—Ä
                await self._close_tender(session, tender)
                
        except asyncio.CancelledError:
            print(f"–¢–∞–π–º–µ—Ä –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id} –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if tender_id in self.active_timers:
                del self.active_timers[tender_id]
    
    async def _close_tender(self, session: AsyncSession, tender: Tender):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        try:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–Ω–¥–µ—Ä
            tender.status = TenderStatus.closed.value
            await session.commit()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if tender.bids:
                winner_bid = min(tender.bids, key=lambda x: x.amount)
                winner = await session.get(User, winner_bid.supplier_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                try:
                    await self.bot.send_message(
                        winner.telegram_id,
                        f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç–µ–Ω–¥–µ—Ä!\n\n"
                        f"üìã {tender.title}\n"
                        f"üí∞ –í–∞—à–∞ —Ü–µ–Ω–∞: {winner_bid.amount} ‚ÇΩ\n"
                        f"üìÖ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {winner_bid.created_at.strftime('%H:%M:%S')}\n\n"
                        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
                organizer = await session.get(User, tender.organizer_id)
                try:
                    await self.bot.send_message(
                        organizer.telegram_id,
                        f"üî¥ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                        f"üìã {tender.title}\n"
                        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.org_name}\n"
                        f"üí∞ –¶–µ–Ω–∞: {winner_bid.amount} ‚ÇΩ\n"
                        f"üìÖ –í—Ä–µ–º—è: {winner_bid.created_at.strftime('%H:%M:%S')}\n\n"
                        f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                await self._notify_participants_about_closure(session, tender, winner)
                
                print(f"–¢–µ–Ω–¥–µ—Ä {tender.id} –∑–∞–∫—Ä—ã—Ç, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.org_name}")
            else:
                # –ó–∞—è–≤–æ–∫ –Ω–µ –±—ã–ª–æ
                organizer = await session.get(User, tender.organizer_id)
                try:
                    await self.bot.send_message(
                        organizer.telegram_id,
                        f"üî¥ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –∑–∞—è–≤–æ–∫!\n\n"
                        f"üìã {tender.title}\n"
                        f"üìä –°—Ç–∞—Ç—É—Å: –ó–∞—è–≤–æ–∫ –Ω–µ –±—ã–ª–æ –ø–æ–¥–∞–Ω–æ\n\n"
                        f"–¢–µ–Ω–¥–µ—Ä –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É: {e}")
                
                print(f"–¢–µ–Ω–¥–µ—Ä {tender.id} –∑–∞–∫—Ä—ã—Ç –±–µ–∑ –∑–∞—è–≤–æ–∫")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–µ–Ω–¥–µ—Ä–∞ {tender.id}: {e}")
    
    async def _notify_participants_about_closure(self, session: AsyncSession, tender: Tender, winner: User):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            stmt = select(TenderParticipant).where(TenderParticipant.tender_id == tender.id)
            result = await session.execute(stmt)
            participants = result.scalars().all()
            
            closure_text = (
                f"üî¥ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                f"üìã {tender.title}\n"
                f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.org_name}\n"
                f"üí∞ –¶–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
                f"üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (–∫—Ä–æ–º–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è)
            for participant in participants:
                if participant.supplier_id != winner.id:
                    try:
                        await self.bot.send_message(
                            participant.supplier.telegram_id,
                            closure_text
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É: {e}")
                        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
    
    async def reset_timer_for_tender(self, tender_id: int):
        """–°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ (–ø—Ä–∏ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ)"""
        if tender_id in self.active_timers:
            # –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä
            self.active_timers[tender_id].cancel()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
        await self.start_timer_for_tender(tender_id, 5)
    
    async def cancel_timer_for_tender(self, tender_id: int):
        """–û—Ç–º–µ–Ω–∞ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞"""
        if tender_id in self.active_timers:
            self.active_timers[tender_id].cancel()
            del self.active_timers[tender_id]
            print(f"–¢–∞–π–º–µ—Ä –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id} –æ—Ç–º–µ–Ω–µ–Ω")
    
    async def check_all_active_tenders(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –Ω–∞ –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            async with SessionLocal() as session:
                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã
                stmt = select(Tender).where(Tender.status == TenderStatus.active.value)
                result = await session.execute(stmt)
                active_tenders = result.scalars().all()
                
                for tender in active_tenders:
                    if tender.last_bid_at:
                        time_since_last_bid = datetime.now() - tender.last_bid_at
                        if time_since_last_bid > timedelta(minutes=5):
                            # –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–Ω–¥–µ—Ä
                            await self._close_tender(session, tender)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤: {e}")
    
    async def start_periodic_check(self, interval_minutes: int = 1):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤"""
        while True:
            try:
                await self.check_all_active_tenders()
                await asyncio.sleep(interval_minutes * 60)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def get_active_timers_count(self) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤"""
        return len(self.active_timers)
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤"""
        for tender_id in list(self.active_timers.keys()):
            await self.cancel_timer_for_tender(tender_id)
        print("–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
