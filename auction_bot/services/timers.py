import asyncio
import logging
from datetime import datetime, timedelta, timezone
from typing import Dict
from zoneinfo import ZoneInfo
from aiogram import Bot
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from auction_bot.keyboards import menu_supplier_registered

from ..db import SessionLocal
from ..models import Tender, TenderStatus, Bid, User, TenderParticipant, TenderAccess

logger = logging.getLogger(__name__)
local_tz = ZoneInfo("Europe/Moscow")


class AuctionTimer:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞–º–∏ –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""

    def __init__(self, bot: Bot):
        self.bot = bot
        self.active_timers: Dict[int, asyncio.Task] = {}
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ: {'before': task, 'start': task} –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞
        self.start_notifications: Dict[int, Dict[str, asyncio.Task]] = {}

    # üîπ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω
    @staticmethod
    def format_price(value: float | int) -> str:
        return f"{value:,.0f}".replace(",", " ")

    async def start_timer_for_tender(self, tender_id: int, delay_minutes: int = 2):
        """–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞"""
        if tender_id in self.active_timers:
            self.active_timers[tender_id].cancel()

        end_time = datetime.now() + timedelta(minutes=delay_minutes)
        task = asyncio.create_task(self._wait_and_close_tender(tender_id, delay_minutes))
        self.active_timers[tender_id] = task

        logger.info(f"‚è± –¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}, "
                    f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {delay_minutes} –º–∏–Ω, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ: {end_time.strftime('%d.%m.%Y %H:%M:%S')}")

    async def _wait_and_close_tender(self, tender_id: int, delay_minutes: int):
        """–û–∂–∏–¥–∞–Ω–∏–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞"""
        try:
            await asyncio.sleep(delay_minutes * 60)

            async with SessionLocal() as session:
                tender = await session.get(Tender, tender_id, options=[selectinload(Tender.bids)])
                if not tender or tender.status != TenderStatus.active.value:
                    return

                if tender.last_bid_at:
                    elapsed = datetime.now() - tender.last_bid_at
                    if elapsed < timedelta(minutes=2):
                        logger.info(f"üîÑ –ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ–Ω–¥–µ—Ä–µ {tender_id}, —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
                        await self.start_timer_for_tender(tender_id, 2)
                        return

            await self._close_tender(tender_id)

        except asyncio.CancelledError:
            logger.info(f"‚èπ –¢–∞–π–º–µ—Ä –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id} –æ—Ç–º–µ–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Ç–∞–π–º–µ—Ä–µ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}: {e}")
        finally:
            self.active_timers.pop(tender_id, None)

    async def _close_tender(self, tender_id: int):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            async with SessionLocal() as session:
                tender = await session.get(Tender, tender_id, options=[selectinload(Tender.bids)])
                if not tender or tender.status != TenderStatus.active.value:
                    return

                tender.status = TenderStatus.closed.value
                await session.commit()

                winner = None
                winner_bid = None

                if tender.bids:
                    # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ
                    winner_bid = min(tender.bids, key=lambda x: x.amount)
                    winner = await session.get(User, winner_bid.supplier_id)

                    created_at_local = winner_bid.created_at.replace(tzinfo=timezone.utc).astimezone(local_tz)
                    price_str = self.format_price(winner_bid.amount)

                    # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
                    if winner:
                        try:
                            await self.bot.send_message(
                                winner.telegram_id,
                                f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç–µ–Ω–¥–µ—Ä!\n\n"
                                f"üìã {tender.title}\n"
                                f"üí∞ –í–∞—à–∞ —Ü–µ–Ω–∞: {price_str} ‚ÇΩ\n"
                                f"üìÖ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {created_at_local.strftime('%H:%M:%S')}\n\n"
                                f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
                                reply_markup=menu_supplier_registered
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")

                    # –£—á–∞—Å—Ç–Ω–∏–∫–∏
                    await self._notify_participants_about_closure(tender_id, winner.id if winner else None)

                    # –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
                    organizer = await session.get(User, tender.organizer_id)
                    if organizer:
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ö–æ–¥ —Ç–æ—Ä–≥–æ–≤ (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
                        bids_report = "üìä –•–û–î –¢–û–†–ì–û–í:\n\n"
                        for i, bid in enumerate(tender.bids, start=1):
                            supplier = await session.get(User, bid.supplier_id)
                            org_name = supplier.org_name if supplier else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
                            bids_report += (
                                f"{i}. üè¢ {org_name}\n"
                                f"   üí∞ –¶–µ–Ω–∞: {self.format_price(bid.amount)} ‚ÇΩ\n"
                                f"   ‚è∞ –í—Ä–µ–º—è: {bid.created_at.astimezone(local_tz).strftime('%H:%M:%S')}\n\n"
                            )

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∏—Ö —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π —Å—Ç–∞–≤–∫–µ
                        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞–≤–∫–∏ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏ –Ω–∞—Ö–æ–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
                        participant_best_bids = {}
                        for bid in tender.bids:
                            supplier_id = bid.supplier_id
                            if supplier_id not in participant_best_bids or bid.amount < participant_best_bids[supplier_id].amount:
                                participant_best_bids[supplier_id] = bid
                        
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ª—É—á—à–µ–π —Å—Ç–∞–≤–∫–µ –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                        sorted_participants = sorted(participant_best_bids.values(), key=lambda x: x.amount)
                        rating_report = "üèÖ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n"
                        for i, bid in enumerate(sorted_participants, start=1):
                            supplier = await session.get(User, bid.supplier_id)
                            org_name = supplier.org_name if supplier else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è"
                            bid_price_str = self.format_price(bid.amount)
                            rating_report += f"{i}. üè¢ {org_name} ‚Äî {bid_price_str} ‚ÇΩ\n"

                        # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
                        winner_name = winner.org_name if winner else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                        try:
                            await self.bot.send_message(
                                organizer.telegram_id,
                                f"üî¥ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                                f"üìã {tender.title}\n"
                                f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n"
                                f"üí∞ –¶–µ–Ω–∞: {price_str} ‚ÇΩ\n\n"
                                f"{rating_report}\n"
                                f"{bids_report}"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É: {e}")


                else:
                    # –ù–µ—Ç —Å—Ç–∞–≤–æ–∫
                    organizer = await session.get(User, tender.organizer_id)
                    if organizer:
                        try:
                            await self.bot.send_message(
                                organizer.telegram_id,
                                f"üî¥ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω –±–µ–∑ –∑–∞—è–≤–æ–∫!\n\n"
                                f"üìã {tender.title}"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É: {e}")

                logger.info(f"‚úÖ –¢–µ–Ω–¥–µ—Ä {tender.id} –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}: {e}")

    async def _notify_participants_about_closure(self, tender_id: int, winner_id: int = None):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∞—É–∫—Ü–∏–æ–Ω–∞"""
        try:
            async with SessionLocal() as session:
                stmt = select(TenderParticipant).where(TenderParticipant.tender_id == tender_id)
                result = await session.execute(stmt)
                participants = result.scalars().all()

                tender = await session.get(Tender, tender_id)

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–º–µ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                winner_number = None
                if winner_id:
                    for i, participant in enumerate(participants):
                        if participant.supplier_id == winner_id:
                            winner_number = i + 1
                            break

                closure_text = (
                    f"üî¥ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                    f"üìã {tender.title}\n"
                    f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: –£—á–∞—Å—Ç–Ω–∏–∫ {winner_number if winner_number else '‚Äî'}\n"
                    f"üí∞ –¶–µ–Ω–∞: {self.format_price(tender.current_price)} ‚ÇΩ\n"
                    f"üìÖ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%H:%M:%S')}\n\n"
                    f"–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º, –∫—Ä–æ–º–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                for participant in participants:
                    if participant.supplier_id != winner_id:
                        user = await session.get(User, participant.supplier_id)
                        if user:
                            try:
                                await self.bot.send_message(user.telegram_id, closure_text)
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É: {e}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")


    async def schedule_start_notifications(self, tender_id: int):
        async with SessionLocal() as session:
            tender = await session.get(Tender, tender_id)
            if not tender:
                logger.warning(f"Tender {tender_id} not found for notifications")
                return

            # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ (Europe/Moscow) –∏ –∫ UTC –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–¥–µ—Ä–∂–µ–∫
            start_at_naive = tender.start_at
            if start_at_naive is None:
                logger.warning(f"Tender {tender_id} has no start_at, skip notifications")
                return

            if start_at_naive.tzinfo is None:
                start_at_local = start_at_naive
            else:
                start_at_local = start_at_naive.astimezone(local_tz)

            start_at_utc = start_at_local.replace(tzinfo=local_tz).astimezone(timezone.utc)
            now_utc = datetime.now(timezone.utc)

            notify_before = (start_at_utc - timedelta(minutes=10)) - now_utc
            notify_start = start_at_utc - now_utc

            if notify_before.total_seconds() > 0:
                # –æ—Ç–º–µ–Ω—è–µ–º —Ä–∞–Ω–µ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é "–∑–∞ 10 –º–∏–Ω—É—Ç"
                if tender_id in self.start_notifications and 'before' in self.start_notifications[tender_id]:
                    self.start_notifications[tender_id]['before'].cancel()
                task_before = asyncio.create_task(self._notify_participants_at_time(
                    tender_id,
                    delay=notify_before.total_seconds(),
                    message_template=(
                        f"‚è∞ –¢–µ–Ω–¥–µ—Ä <b>{tender.title}</b> –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç!\n"
                        f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_at_local.strftime('%d.%m.%Y %H:%M')}"
                    )
                ))
                self.start_notifications.setdefault(tender_id, {})['before'] = task_before
                logger.info(f"Task created: 10-min notification for tender {tender_id}")
            else:
                logger.warning(f"Skipped 10-min notification for tender {tender_id}, time already passed")

            if notify_start.total_seconds() > 0:
                # –æ—Ç–º–µ–Ω—è–µ–º —Ä–∞–Ω–µ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é "–Ω–∞—á–∞–ª—Å—è"
                if tender_id in self.start_notifications and 'start' in self.start_notifications[tender_id]:
                    self.start_notifications[tender_id]['start'].cancel()
                task_start = asyncio.create_task(self._notify_participants_at_time(
                    tender_id,
                    delay=notify_start.total_seconds(),
                    message_template=(
                        f"üü¢ –¢–µ–Ω–¥–µ—Ä <b>{tender.title}</b> –Ω–∞—á–∞–ª—Å—è!\n"
                        f"üìÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {start_at_local.strftime('%d.%m.%Y %H:%M')}"
                    )
                ))
                self.start_notifications.setdefault(tender_id, {})['start'] = task_start
                logger.info(f"Task created: start notification for tender {tender_id}")
            else:
                logger.warning(f"Skipped start notification for tender {tender_id}, time already passed")

    async def _notify_participants_at_time(self, tender_id: int, delay: float, message_template: str):
        logger.info(f"Tender {tender_id} ‚Üí waiting {delay:.0f} sec before notification")
        await asyncio.sleep(delay)

        async with SessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ–Ω–¥–µ—Ä–∞
            stmt = select(TenderParticipant).where(TenderParticipant.tender_id == tender_id)
            result = await session.execute(stmt)
            participants = result.scalars().all()

            for supplier_id in {p.supplier_id for p in participants}:
                user = await session.get(User, supplier_id)
                if user:
                    try:
                        await self.bot.send_message(user.telegram_id, message_template)
                        logger.info(f"Notification sent to user {user.id}")
                    except Exception as e:
                        logger.error(f"Failed to send notification to user {user.id}: {e}")

    async def cancel_start_notifications(self, tender_id: int):
        """–û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (10 –º–∏–Ω –∏ —Å—Ç–∞—Ä—Ç) –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞"""
        if tender_id in self.start_notifications:
            for key, task in self.start_notifications[tender_id].items():
                if task and not task.done():
                    task.cancel()
                    try:
                        await task
                    except asyncio.CancelledError:
                        pass
                    logger.info(f"‚èπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ '{key}' –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id} –æ—Ç–º–µ–Ω–µ–Ω–æ")
            self.start_notifications.pop(tender_id, None)

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # —Ç–∞–π–º–µ—Ä—ã –∞—É–∫—Ü–∏–æ–Ω–æ–≤
        for tender_id in list(self.active_timers.keys()):
            await self.cancel_timer_for_tender(tender_id)
        # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ä—Ç–µ
        for tender_id in list(self.start_notifications.keys()):
            await self.cancel_start_notifications(tender_id)
        logger.info("–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")

    async def reset_timer_for_tender(self, tender_id: int):
        if tender_id in self.active_timers:
            self.active_timers[tender_id].cancel()
        logger.info(f"üîÑ –°–±—Ä–æ—Å —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}")
        await self.start_timer_for_tender(tender_id, 2)

    async def cancel_timer_for_tender(self, tender_id: int):
        if tender_id in self.active_timers:
            self.active_timers[tender_id].cancel()
            self.active_timers.pop(tender_id, None)
            logger.info(f"‚èπ –¢–∞–π–º–µ—Ä –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id} –æ—Ç–º–µ–Ω–µ–Ω")

    async def check_all_active_tenders(self):
        try:
            async with SessionLocal() as session:
                stmt = select(Tender).where(Tender.status == TenderStatus.active.value)
                result = await session.execute(stmt)
                active_tenders = result.scalars().all()

                for tender in active_tenders:
                    if tender.last_bid_at:
                        elapsed = datetime.now() - tender.last_bid_at
                        if elapsed > timedelta(minutes=2):
                            await self._close_tender(tender.id)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–Ω–¥–µ—Ä–æ–≤: {e}")

    async def start_periodic_check(self, interval_minutes: int = 1):
        while True:
            try:
                await self.check_all_active_tenders()
                await asyncio.sleep(interval_minutes * 60)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
                await asyncio.sleep(60)

    def get_active_timers_count(self) -> int:
        return len(self.active_timers)

    async def cleanup(self):
        for tender_id in list(self.active_timers.keys()):
            await self.cancel_timer_for_tender(tender_id)
        logger.info("–í—Å–µ —Ç–∞–π–º–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã")
