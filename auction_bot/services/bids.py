from datetime import datetime
from aiogram import Router
from aiogram.types import Message
from sqlalchemy import select

from ..db import SessionLocal
from ..models import Tender, TenderStatus, Bid, User, TenderParticipant
from ..services.timers import AuctionTimer

router = Router()
auction_timer = None  # –ì–ª–æ–±–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å —Ç–∞–π–º–µ—Ä–æ–≤


@router.message(lambda m: m.text and m.text.startswith("/bid"))
async def place_bid(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–π —Å—Ç–∞–≤–∫–∏ –≤ —Ç–µ–Ω–¥–µ—Ä–µ"""
    global auction_timer
    if not auction_timer:
        auction_timer = AuctionTimer(message.bot)

    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /bid <tender_id> <—Å—É–º–º–∞>")
            return

        tender_id = int(parts[1])
        amount = float(parts[2])
        user_id = message.from_user.id

        async with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.get(User, user_id)
            if not user:
                await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–Ω–¥–µ—Ä
            tender = await session.get(Tender, tender_id)
            if not tender or tender.status != TenderStatus.active.value:
                await message.answer("‚ùå –¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É–º–º—ã (—Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã)
            if amount >= tender.current_price:
                await message.answer(
                    f"‚ùå –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã ({tender.current_price} ‚ÇΩ)."
                )
                return

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞–≤–∫—É
            new_bid = Bid(
                tender_id=tender.id,
                supplier_id=user.id,
                amount=amount,
                created_at=datetime.utcnow()
            )
            session.add(new_bid)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–Ω–¥–µ—Ä
            tender.current_price = amount
            tender.last_bid_at = datetime.utcnow()

            # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç)
            stmt = select(TenderParticipant).where(
                TenderParticipant.tender_id == tender.id,
                TenderParticipant.supplier_id == user.id
            )
            result = await session.execute(stmt)
            participant = result.scalar_one_or_none()
            if not participant:
                session.add(TenderParticipant(tender_id=tender.id, supplier_id=user.id))

            await session.commit()

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –∞—É–∫—Ü–∏–æ–Ω–∞
            await auction_timer.reset_timer_for_tender(tender.id)

            await message.answer(
                f"‚úÖ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
                f"üìã {tender.title}\n"
                f"üí∞ –¶–µ–Ω–∞: {amount} ‚ÇΩ\n"
                f"‚è∞ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–∫—Ä–æ–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã, –µ—Å–ª–∏ –Ω–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—É–¥–µ—Ç."
            )

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–∞–≤–∫–∏.")
