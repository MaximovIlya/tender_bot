import asyncio
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from ..db import SessionLocal
from ..models import User, Tender, TenderStatus, TenderParticipant, Bid
from ..keyboards import menu_supplier
from ..services.timers import AuctionTimer

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ
class AuctionParticipation(StatesGroup):
    waiting_for_bid = State()

@router.message(lambda message: message.text == "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã")
async def show_active_tenders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if not user or not user.org_name:
            await message.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã
        stmt = select(Tender).where(
            and_(
                Tender.status == TenderStatus.active.value,
                Tender.start_at <= datetime.now()
            )
        ).order_by(Tender.start_at.desc())
        
        result = await session.execute(stmt)
        active_tenders = result.scalars().all()
        
        if not active_tenders:
            await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
            return
        
        response = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã:\n\n"
        for tender in active_tenders:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫ –≤ —ç—Ç–æ–º —Ç–µ–Ω–¥–µ—Ä–µ
            participant = await session.get(TenderParticipant, 
                {"tender_id": tender.id, "supplier_id": user.id})
            
            status = "‚úÖ –£—á–∞—Å—Ç–≤—É–µ—Ç–µ" if participant else "üÜï –ù–æ–≤—ã–π"
            
            response += (
                f"üìã <b>{tender.title}</b>\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
                f"üìÖ –ù–∞—á–∞–ª–æ: {tender.start_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tender.description[:100]}...\n"
                f"üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tender.participants)}\n"
                f"üìà –ó–∞—è–≤–æ–∫: {len(tender.bids)}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for tender in active_tenders:
            participant = await session.get(TenderParticipant, 
                {"tender_id": tender.id, "supplier_id": user.id})
            
            if not participant:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ '{tender.title}'",
                        callback_data=f"join_tender_{tender.id}"
                    )
                ])
            else:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ '{tender.title}'",
                        callback_data=f"bid_tender_{tender.id}"
                    )
                ])
        
        await message.answer(response, reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("join_tender_"))
async def join_tender(callback: CallbackQuery):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç–µ–Ω–¥–µ—Ä—É"""
    tender_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user or not user.org_name:
            await callback.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return
        
        tender = await session.get(Tender, tender_id)
        if not tender or tender.status != TenderStatus.active.value:
            await callback.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫
        existing_participant = await session.get(TenderParticipant, 
            {"tender_id": tender_id, "supplier_id": user.id})
        
        if existing_participant:
            await callback.answer("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Ç–µ–Ω–¥–µ—Ä–µ.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = TenderParticipant(
            tender_id=tender_id,
            supplier_id=user.id
        )
        session.add(participant)
        await session.commit()
        
        await callback.message.edit_text(
            f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç–µ–Ω–¥–µ—Ä—É!\n\n"
            f"üìã {tender.title}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {tender.start_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã."
        )

@router.callback_query(lambda c: c.data.startswith("bid_tender_"))
async def start_bidding(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    tender_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user or not user.org_name:
            await callback.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return
        
        tender = await session.get(Tender, tender_id)
        if not tender or tender.status != TenderStatus.active.value:
            await callback.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ
        participant = await session.get(TenderParticipant, 
            {"tender_id": tender_id, "supplier_id": user.id})
        
        if not participant:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Ç–µ–Ω–¥–µ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∞—É–∫—Ü–∏–æ–Ω–∞
        if tender.last_bid_at and datetime.now() - tender.last_bid_at > timedelta(minutes=5):
            await callback.answer("–í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –∏—Å—Ç–µ–∫–ª–æ.")
            return
        
        await state.update_data(tender_id=tender_id)
        await state.set_state(AuctionParticipation.waiting_for_bid)
        
        await callback.message.answer(
            f"üí∞ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–Ω–¥–µ—Ä '{tender.title}'\n\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: {tender.min_bid_decrease} ‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π):"
        )

@router.message(AuctionParticipation.waiting_for_bid)
async def process_bid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏"""
    try:
        bid_amount = float(message.text.replace(',', '.'))
        if bid_amount <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    user_data = await state.get_data()
    tender_id = user_data['tender_id']
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        tender = await session.get(Tender, tender_id)
        if not tender or tender.status != TenderStatus.active.value:
            await message.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π
        if bid_amount >= tender.current_price:
            await message.answer(
                f"–í–∞—à–∞ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π ({tender.current_price} ‚ÇΩ).\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
        if tender.current_price - bid_amount < tender.min_bid_decrease:
            await message.answer(
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã: {tender.min_bid_decrease} ‚ÇΩ\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        bid = Bid(
            tender_id=tender_id,
            supplier_id=user_id,
            amount=bid_amount
        )
        session.add(bid)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–µ–Ω–¥–µ—Ä–∞
        tender.current_price = bid_amount
        tender.last_bid_at = datetime.now()
        
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        user = await session.get(User, user_id)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
        await notify_participants_about_bid(session, tender, bid, user)
        
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞!\n\n"
            f"üìã –¢–µ–Ω–¥–µ—Ä: {tender.title}\n"
            f"üí∞ –í–∞—à–∞ —Ü–µ–Ω–∞: {bid_amount} ‚ÇΩ\n"
            f"üìÖ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {bid.created_at.strftime('%H:%M:%S')}\n\n"
            f"–ê—É–∫—Ü–∏–æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!",
            reply_markup=menu_supplier
        )
    
    await state.clear()

async def notify_participants_about_bid(session: AsyncSession, tender: Tender, bid: Bid, bidder: User):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ–Ω–¥–µ—Ä–∞
    stmt = select(TenderParticipant).where(TenderParticipant.tender_id == tender.id)
    result = await session.execute(stmt)
    participants = result.scalars().all()
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∞–Ω–æ–Ω–∏–º–Ω–æ)
    participant_number = 1
    for i, participant in enumerate(participants):
        if participant.supplier_id == bidder.id:
            participant_number = i + 1
            break
    
    notification_text = (
        f"üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ —Ç–µ–Ω–¥–µ—Ä–µ '{tender.title}'!\n\n"
        f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫ {participant_number}\n"
        f"üí∞ –¶–µ–Ω–∞: {bid.amount} ‚ÇΩ\n"
        f"üìÖ –í—Ä–µ–º—è: {bid.created_at.strftime('%H:%M:%S')}\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {tender.current_price} ‚ÇΩ"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    for participant in participants:
        if participant.supplier_id != bidder.id:  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–∞–≤—à–µ–≥–æ –∑–∞—è–≤–∫—É
            try:
                await session.bot.send_message(
                    participant.supplier.telegram_id,
                    notification_text
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@router.message(Command("my_bids"))
async def show_my_bids(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user or not user.org_name:
            await message.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(Bid).where(Bid.supplier_id == user.id).order_by(Bid.created_at.desc())
        result = await session.execute(stmt)
        bids = result.scalars().all()
        
        if not bids:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
            return
        
        response = "üìà –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
        for bid in bids:
            tender = await session.get(Tender, bid.tender_id)
            if tender:
                response += (
                    f"üìã {tender.title}\n"
                    f"üí∞ –¶–µ–Ω–∞: {bid.amount} ‚ÇΩ\n"
                    f"üìÖ –í—Ä–µ–º—è: {bid.created_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å —Ç–µ–Ω–¥–µ—Ä–∞: {tender.status}\n\n"
                )
        
        await message.answer(response, reply_markup=menu_supplier)

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    dp.include_router(router)
