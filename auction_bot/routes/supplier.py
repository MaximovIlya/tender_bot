import asyncio
import os
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession
from datetime import datetime, timezone
from sqlalchemy.orm import selectinload

from ..db import SessionLocal
from ..models import User, Tender, TenderStatus, TenderParticipant, Bid, TenderAccess
from ..keyboards import menu_participant, menu_supplier_registered
from ..services.timers import AuctionTimer
from ..bot import bot

auction_timer: AuctionTimer | None = None

def set_timer(timer: AuctionTimer):
    global auction_timer
    auction_timer = timer

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–µ
class AuctionParticipation(StatesGroup):
    waiting_for_bid = State()

@router.message(F.text == "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã")
async def show_active_tenders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã"""
    user_id = message.from_user.id

    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if not user or not user.org_name:
            await message.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.banned:
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–∞ (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
        # –í–ê–ñ–ù–û: –í—Ä–µ–º—è –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        now_utc = datetime.now(timezone.utc)
        now_local = datetime.now()  # –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–Ω–¥–µ—Ä—ã, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
        stmt = (
            select(Tender)
            .join(TenderAccess, Tender.id == TenderAccess.tender_id)
            .where(
                and_(
                    Tender.status == TenderStatus.active.value,
                    Tender.start_at <= now_local,  # –¢–µ–Ω–¥–µ—Ä —É–∂–µ –Ω–∞—á–∞–ª—Å—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
                    TenderAccess.supplier_id == user.id  # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
                )
            )
            .options(
                selectinload(Tender.participants),
                selectinload(Tender.bids),
            )
            .order_by(Tender.start_at.desc())
        )
        result = await session.execute(stmt)
        active_tenders = result.scalars().all()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–∫–∂–µ —Ç–µ–Ω–¥–µ—Ä—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏, —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–∞
        stmt_pending = (
            select(Tender)
            .join(TenderAccess, Tender.id == TenderAccess.tender_id)
            .where(
                and_(
                    Tender.status == TenderStatus.active_pending.value,
                    Tender.start_at > now_local,  # –¢–µ–Ω–¥–µ—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)
                    TenderAccess.supplier_id == user.id  # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
                )
            )
            .options(
                selectinload(Tender.participants),
                selectinload(Tender.bids),
            )
            .order_by(Tender.start_at.asc())
        )
        result_pending = await session.execute(stmt_pending)
        pending_tenders = result_pending.scalars().all()
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print(f"DEBUG: –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {now_local.strftime('%d.%m.%Y %H:%M:%S')}")
        print(f"DEBUG: UTC –≤—Ä–µ–º—è: {now_utc.strftime('%d.%m.%Y %H:%M:%S')}")
        print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤: {len(active_tenders)}")
        print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤: {len(pending_tenders)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–µ–Ω–¥–µ—Ä—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        stmt_debug = select(Tender)
        result_debug = await session.execute(stmt_debug)
        all_tenders = result_debug.scalars().all()
        print(f"DEBUG: –í—Å–µ–≥–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –≤ –ë–î: {len(all_tenders)}")
        for t in all_tenders:
            print(f"DEBUG: –¢–µ–Ω–¥–µ—Ä '{t.title}' - —Å—Ç–∞—Ç—É—Å: {t.status}, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {t.start_at}")

        if not active_tenders and not pending_tenders:
            await message.answer(
                "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤, –∫ –∫–æ—Ç–æ—Ä—ã–º —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø.\n\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–Ω–¥–µ—Ä–∞–º."
            )
            return

        response = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for tender in active_tenders:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stmt = select(TenderParticipant).where(
                TenderParticipant.tender_id == tender.id,
                TenderParticipant.supplier_id == user.id
            )
            result = await session.execute(stmt)
            participant = result.scalar_one_or_none()

            status = "‚úÖ –£—á–∞—Å—Ç–≤—É–µ—Ç–µ" if participant else "üÜï –ù–æ–≤—ã–π"

            response += (
                f"üìã <b>{tender.title}</b>\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
                f"üìÖ –ù–∞—á–∞–ª–æ: {tender.start_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tender.description[:100]}...\n"
                f"üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tender.participants)}\n"
                f"üìà –ó–∞—è–≤–æ–∫: {len(tender.bids)}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
            )

            # –ö–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–∏—è –∏–ª–∏ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
            if not participant:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ '{tender.title}'",
                        callback_data=f"join_tender_{tender.id}"
                    )
                ])
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(
                        text=f"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ '{tender.title}'",
                        callback_data=f"bid_tender_{tender.id}"
                    )
                ])

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç–µ–Ω–¥–µ—Ä—ã
        if pending_tenders:
            response += "\nüïê –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ —Ç–µ–Ω–¥–µ—Ä—ã:\n\n"
            
            for tender in pending_tenders:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                stmt = select(TenderParticipant).where(
                    TenderParticipant.tender_id == tender.id,
                    TenderParticipant.supplier_id == user.id
                )
                result = await session.execute(stmt)
                participant = result.scalar_one_or_none()

                status = "‚úÖ –£—á–∞—Å—Ç–≤—É–µ—Ç–µ" if participant else "üÜï –ù–æ–≤—ã–π"

                response += (
                    f"üìã <b>{tender.title}</b>\n"
                    f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {tender.start_price} ‚ÇΩ\n"
                    f"üìÖ –ù–∞—á–∞–ª–æ: {tender.start_at.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tender.description[:100]}...\n"
                    f"üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tender.participants)}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
                )

                # –ö–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–∏—è –¥–ª—è –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤
                if not participant:
                    keyboard.inline_keyboard.append([
                        InlineKeyboardButton(
                            text=f"–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ '{tender.title}'",
                            callback_data=f"join_tender_{tender.id}"
                        )
                    ])
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º —Ç–µ–Ω–¥–µ—Ä–µ
                    keyboard.inline_keyboard.append([
                        InlineKeyboardButton(
                            text=f"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ '{tender.title}' (–æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)",
                            callback_data=f"bid_tender_{tender.id}"
                        )
                    ])

        await message.answer(response, reply_markup=keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã —É—Å–ª–æ–≤–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å
        tenders_with_files = [t for t in active_tenders + pending_tenders if getattr(t, "conditions_path", None)]
        for tender in tenders_with_files:
            try:
                file_path = tender.conditions_path
                if file_path and os.path.exists(file_path):
                    await message.answer_document(
                        FSInputFile(file_path),
                        caption=f"üìé –£—Å–ª–æ–≤–∏—è —Ç–µ–Ω–¥–µ—Ä–∞: {tender.title}"
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —É—Å–ª–æ–≤–∏–π –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender.id}: {e}")
        
@router.message(F.text == "–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def handle_bid_button(message: Message, state: FSMContext):
    user_id = message.from_user.id

    async with SessionLocal() as session:
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ–Ω–¥–µ—Ä, –≥–¥–µ –æ–Ω —É—á–∞—Å—Ç–≤—É–µ—Ç
        stmt = (
            select(TenderParticipant)
            .where(TenderParticipant.supplier_id == user.id)
            .order_by(TenderParticipant.id.desc())
            .limit(1)
        )
        result = await session.execute(stmt)
        participant = result.scalar_one_or_none()

        if not participant:
            await message.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ç–µ–Ω–¥–µ—Ä–µ.")
            return

        tender = await session.get(Tender, participant.tender_id)

        if not tender or tender.status != TenderStatus.active.value:
            await message.answer("–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞—á–∞–ª–∞.")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º tender_id –≤ state
        await state.update_data(tender_id=tender.id)
        await state.set_state(AuctionParticipation.waiting_for_bid)
        
        
        price_str = f"{tender.current_price:,.0f}".replace(",", " ")
        min_bid_str = f"{tender.min_bid_decrease:,.0f}".replace(",", " ")

        await message.answer(
            f"üí∞ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–Ω–¥–µ—Ä '{tender.title}'\n\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price_str} ‚ÇΩ\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: {min_bid_str} ‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É:"
        )


@router.callback_query(lambda c: c.data.startswith("join_tender_"))
async def join_tender(callback: CallbackQuery):
    """–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ —Ç–µ–Ω–¥–µ—Ä—É"""
    tender_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async with SessionLocal() as session:
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        
        if not user or not user.org_name:
            await callback.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.banned:
            await callback.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        tender = await session.get(Tender, tender_id)
        if not tender or tender.status not in [TenderStatus.active.value, TenderStatus.active_pending.value]:
            await callback.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–Ω–¥–µ—Ä—É
        stmt = select(TenderAccess).where(
            TenderAccess.tender_id == tender_id,
            TenderAccess.supplier_id == user.id
        )
        result = await session.execute(stmt)
        access = result.scalar_one_or_none()
        
        if not access:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–µ–Ω–¥–µ—Ä—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫
        stmt = (
            select(TenderParticipant)
            .join(Tender, Tender.id == TenderParticipant.tender_id)
            .where(
                TenderParticipant.supplier_id == user.id,
                Tender.status == TenderStatus.active.value
            )
        )
        result = await session.execute(stmt)
        active_participation = result.scalar_one_or_none()

        if active_participation:
            await callback.message.answer("‚ö†Ô∏è –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –¥—Ä—É–≥–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º —Ç–µ–Ω–¥–µ—Ä–µ. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return
                
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        participant = TenderParticipant(
            tender_id=tender_id,
            supplier_id=user.id
        )
        session.add(participant)
        await session.commit()

        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º —Å—Ç–∞—Ä—Ç–µ –∏ –æ –Ω–∞—á–∞–ª–µ —Ç–µ–Ω–¥–µ—Ä–∞
        try:
            if auction_timer:
                await auction_timer.schedule_start_notifications(tender.id)
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender.id}: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ '{tender.title}'",
                callback_data=f"bid_tender_{tender.id}"
            )]
        ])
        
        price_str = f"{tender.current_price:,.0f}".replace(",", " ")
        
        await callback.message.answer(
            f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —Ç–µ–Ω–¥–µ—Ä—É!\n\n"
            f"üìã {tender.title}\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price_str} ‚ÇΩ\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {tender.start_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã.",
            reply_markup=menu_participant
        )


@router.callback_query(lambda c: c.data.startswith("bid_tender_"))
async def start_bidding(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏"""
    tender_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        
        if not user or not user.org_name:
            await callback.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.banned:
            await callback.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        tender = await session.get(Tender, tender_id)
        if not tender or tender.status not in [TenderStatus.active.value, TenderStatus.active_pending.value]:
            await callback.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–Ω–¥–µ—Ä—É
        stmt = select(TenderAccess).where(
            TenderAccess.tender_id == tender_id,
            TenderAccess.supplier_id == user.id
        )
        result = await session.execute(stmt)
        access = result.scalar_one_or_none()
        
        if not access:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–µ–Ω–¥–µ—Ä—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ
        stmt = select(TenderParticipant).where(
            TenderParticipant.tender_id == tender_id,
            TenderParticipant.supplier_id == user.id
        )
        result = await session.execute(stmt)
        participant = result.scalar_one_or_none()
        
        if not participant:
            await callback.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Ç–µ–Ω–¥–µ—Ä—É.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–Ω–¥–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω (–Ω–µ –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
        if tender.status == TenderStatus.active_pending.value:
            await callback.answer("–¢–µ–Ω–¥–µ—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
            return
        
        
        await callback.message.edit_reply_markup(reply_markup=None)
        await state.update_data(tender_id=tender_id)
        await state.set_state(AuctionParticipation.waiting_for_bid)
        
        await callback.message.answer(
            f"üí∞ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–Ω–¥–µ—Ä '{tender.title}'\n\n"
            f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: {tender.min_bid_decrease} ‚ÇΩ\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π):"
        )

@router.message(AuctionParticipation.waiting_for_bid)
async def process_bid(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–∫–∏"""
    try:
        bid_amount = float(message.text.replace(',', '.'))
        if bid_amount <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    user_data = await state.get_data()
    tender_id = user_data['tender_id']
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        tender = await session.get(Tender, tender_id)
        if not tender or tender.status not in [TenderStatus.active.value, TenderStatus.active_pending.value]:
            await message.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–ª–µ–Ω.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–Ω–¥–µ—Ä—É
        stmt = select(TenderAccess).where(
            TenderAccess.tender_id == tender_id,
            TenderAccess.supplier_id == user.id
        )
        result = await session.execute(stmt)
        access = result.scalar_one_or_none()
        
        if not access:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–µ–Ω–¥–µ—Ä—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.")
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–Ω–¥–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω (–Ω–µ –æ–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
        if tender.status == TenderStatus.active_pending.value:
            await message.answer("–¢–µ–Ω–¥–µ—Ä –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª—Å—è. –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–Ω–∞ –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π
        if bid_amount >= tender.current_price:
            await message.answer(
                f"–í–∞—à–∞ —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ —Ç–µ–∫—É—â–µ–π ({tender.current_price} ‚ÇΩ).\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ
        if tender.current_price - bid_amount < tender.min_bid_decrease:
            await message.answer(
                f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã: {tender.min_bid_decrease} ‚ÇΩ\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
        
        max_decrease = tender.current_price * 0.1
        if tender.current_price - bid_amount > max_decrease:
            await message.answer(
                f"–í—ã —Å–Ω–∏–∑–∏–ª–∏ —Ü–µ–Ω—É –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 10% –æ—Ç —Ç–µ–∫—É—â–µ–π. –í–æ–∑–º–æ–∂–Ω–æ –≤—ã –æ—à–∏–±–ª–∏—Å—å\n"
                f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
        bid = Bid(
            tender_id=tender_id,
            supplier_id=user.id,
            amount=bid_amount
        )
        session.add(bid)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É —Ç–µ–Ω–¥–µ—Ä–∞
        tender.current_price = bid_amount
        tender.last_bid_at = datetime.now()
        
        await session.commit()

        if auction_timer:
            await auction_timer.reset_timer_for_tender(tender.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
        await notify_participants_about_bid(session, tender, bid, user)
        
        price_str = f"{bid_amount:,.0f}".replace(",", " ")
        start_price_str = f"{tender.start_price:,.0f}".replace(",", " ")
        
        
        await message.answer(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞!\n\n"
            f"üìã –¢–µ–Ω–¥–µ—Ä: {tender.title}\n"
            f"üí∞ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {start_price_str} ‚ÇΩ\n"
            f"üí∞ –í–∞—à–∞ —Ü–µ–Ω–∞: {price_str} ‚ÇΩ\n"
            f"üìÖ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {tender.last_bid_at.strftime('%H:%M:%S')}\n\n"
            f"–ê—É–∫—Ü–∏–æ–Ω –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è!",
            reply_markup=menu_participant
        )
    
    await state.clear()

async def notify_participants_about_bid(session: AsyncSession, tender: Tender, bid: Bid, bidder: User):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ"""
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç–µ–Ω–¥–µ—Ä–∞
    stmt = select(TenderParticipant).where(TenderParticipant.tender_id == tender.id)
    result = await session.execute(stmt)
    participants = result.scalars().all()
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∞–Ω–æ–Ω–∏–º–Ω–æ)
    participant_number = 1
    for i, participant in enumerate(participants):
        if participant.supplier_id == bidder.id:
            participant_number = i + 1
            break
    
    amount_str = f"{bid.amount:,.0f}".replace(",", " ")
    from zoneinfo import ZoneInfo
    from datetime import timezone as _tz
    local_tz = ZoneInfo("Europe/Moscow")
    created_local = bid.created_at.replace(tzinfo=_tz.utc).astimezone(local_tz) if bid.created_at.tzinfo is None else bid.created_at.astimezone(local_tz)
    notification_text = (
        f"üî• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –≤ —Ç–µ–Ω–¥–µ—Ä–µ '{tender.title}'!\n\n"
        f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫ {participant_number}\n"
        f"üí∞ –¶–µ–Ω–∞: {amount_str} ‚ÇΩ\n"
        f"üìÖ –í—Ä–µ–º—è: {created_local.strftime('%H:%M:%S')}\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {tender.current_price} ‚ÇΩ"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    for participant in participants:
        if participant.supplier_id != bidder.id:  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–∞–≤—à–µ–≥–æ –∑–∞—è–≤–∫—É
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-—É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                stmt = select(User).where(User.id == participant.supplier_id)
                result = await session.execute(stmt)
                participant_user = result.scalar_one_or_none()
                
                if participant_user:
                    await bot.send_message(
                    participant_user.telegram_id,
                    notification_text
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

@router.message(Command("debug_tenders"))
async def debug_tenders(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        
        if not user or not user.org_name:
            await message.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.banned:
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        now_utc = datetime.now(timezone.utc)
        now_local = datetime.now()  # –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —Ç–µ–Ω–¥–µ—Ä—ã
        stmt = select(Tender).order_by(Tender.created_at.desc())
        result = await session.execute(stmt)
        all_tenders = result.scalars().all()
        
        if not all_tenders:
            await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
            return
        
        response = f"üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–Ω–¥–µ—Ä–∞—Ö\n"
        response += f"üìÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {now_local.strftime('%d.%m.%Y %H:%M:%S')}\n"
        response += f"üåç UTC –≤—Ä–µ–º—è: {now_utc.strftime('%d.%m.%Y %H:%M:%S')}\n"
        response += f"üìä –í—Å–µ–≥–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤: {len(all_tenders)}\n\n"
        
        for tender in all_tenders:
            status_emoji = {
                TenderStatus.draft.value: "üìù",
                TenderStatus.active_pending.value: "‚è≥",
                TenderStatus.active.value: "üü¢",
                TenderStatus.closed.value: "üî¥",
                TenderStatus.cancelled.value: "‚ùå"
            }.get(tender.status, "‚ùì")
            
            status_text = {
                TenderStatus.draft.value: "–ß–µ—Ä–Ω–æ–≤–∏–∫",
                TenderStatus.active_pending.value: "–û–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
                TenderStatus.active.value: "–ê–∫—Ç–∏–≤–µ–Ω",
                TenderStatus.closed.value: "–ó–∞–≤–µ—Ä—à–µ–Ω",
                TenderStatus.cancelled.value: "–û—Ç–º–µ–Ω–µ–Ω"
            }.get(tender.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ —Ç–µ–Ω–¥–µ—Ä –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º
            should_be_active = (
                tender.status == TenderStatus.active_pending.value and 
                tender.start_at <= now_local
            )
            
            from zoneinfo import ZoneInfo
            from datetime import timezone as _tz
            local_tz = ZoneInfo("Europe/Moscow")
            created_local = tender.created_at.replace(tzinfo=_tz.utc).astimezone(local_tz) if tender.created_at and tender.created_at.tzinfo is None else (tender.created_at.astimezone(local_tz) if tender.created_at else None)
            response += (
                f"{status_emoji} <b>{tender.title}</b>\n"
                f"   ID: {tender.id}\n"
                f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"   –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {tender.start_at.strftime('%d.%m.%Y %H:%M:%S') if tender.start_at else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"   –°–æ–∑–¥–∞–Ω: {created_local.strftime('%d.%m.%Y %H:%M:%S') if created_local else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            )
            
            if should_be_active:
                response += f"   ‚ö†Ô∏è –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ê–ö–¢–ò–í–ù–´–ú!\n"
            
            response += "\n"
        
        await message.answer(response, reply_markup=menu_supplier_registered)

@router.message(Command("force_activate"))
async def force_activate_tenders(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–Ω–¥–µ—Ä–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        
        if not user or not user.org_name:
            await message.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.banned:
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC –∏ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        now_utc = datetime.now(timezone.utc)
        now_local = datetime.now()  # –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–∏—Å—Ç–µ–º—ã
        
        # –ò—â–µ–º —Ç–µ–Ω–¥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏
        stmt = select(Tender).where(
            Tender.status == TenderStatus.active_pending.value,
            Tender.start_at <= now_local
        )
        result = await session.execute(stmt)
        pending_tenders = result.scalars().all()
        
        if not pending_tenders:
            await message.answer("–ù–µ—Ç —Ç–µ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
            return
        
        response = f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–µ–Ω–¥–µ—Ä–æ–≤\n"
        response += f"üìÖ –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {now_local.strftime('%d.%m.%Y %H:%M:%S')}\n"
        response += f"üåç UTC –≤—Ä–µ–º—è: {now_utc.strftime('%d.%m.%Y %H:%M:%S')}\n\n"
        
        for tender in pending_tenders:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–Ω–¥–µ—Ä
            tender.status = TenderStatus.active.value
            tender.current_price = tender.start_price
            response += f"‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {tender.title}\n"
        
        await session.commit()
        response += f"\nüéâ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ç–µ–Ω–¥–µ—Ä–æ–≤: {len(pending_tenders)}"
        
        await message.answer(response, reply_markup=menu_supplier_registered)

@router.message(Command("my_bids"))
async def show_my_bids(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        
        if not user or not user.org_name:
            await message.answer("–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user.banned:
            await message.answer("–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(Bid).where(Bid.supplier_id == user.id).order_by(Bid.created_at.desc())
        result = await session.execute(stmt)
        bids = result.scalars().all()
        
        if not bids:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
            return
        
        response = "üìà –í–∞—à–∏ –∑–∞—è–≤–∫–∏:\n\n"
        for bid in bids:
            tender = await session.get(Tender, bid.tender_id)
            if tender:
                from zoneinfo import ZoneInfo
                from datetime import timezone as _tz
                local_tz = ZoneInfo("Europe/Moscow")
                created_local = bid.created_at.replace(tzinfo=_tz.utc).astimezone(local_tz) if bid.created_at.tzinfo is None else bid.created_at.astimezone(local_tz)
                response += (
                    f"üìã {tender.title}\n"
                    f"üí∞ –¶–µ–Ω–∞: {bid.amount} ‚ÇΩ\n"
                    f"üìÖ –í—Ä–µ–º—è: {created_local.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üìä –°—Ç–∞—Ç—É—Å —Ç–µ–Ω–¥–µ—Ä–∞: {tender.status}\n\n"
                )
        
        await message.answer(response, reply_markup=menu_supplier_registered)

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    dp.include_router(router)
