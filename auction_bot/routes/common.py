import asyncio
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from ..db import SessionLocal
from ..models import User, Tender, TenderStatus, TenderParticipant
from ..keyboards import menu_main

router = Router()

@router.message(Command("help"))
async def show_help(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>\n\n"
        "üìã <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "‚Ä¢ /profile - –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Ä¢ /tenders - –°–ø–∏—Å–æ–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤\n\n"
        
        "üéØ <b>–î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–¥–µ—Ä–æ–≤\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–∫—Ü–∏–æ–Ω–∞–º–∏\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
        
        "üè¢ <b>–î–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:</b>\n"
        "‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö\n"
        "‚Ä¢ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫\n\n"
        
        "üëë <b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
        "‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã\n"
        "‚Ä¢ –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–µ–π\n\n"
        
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )
    
    await message.answer(help_text)

@router.message(Command("profile"))
async def show_profile(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user:
            await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        role_names = {
            "admin": "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            "organizer": "üéØ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
            "supplier": "üè¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫"
        }
        
        profile_text = f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        profile_text += f"üÜî Telegram ID: {user.telegram_id}\n"
        profile_text += f"üë§ Username: @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        profile_text += f"üé≠ –†–æ–ª—å: {role_names.get(user.role, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        profile_text += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.created_at.strftime('%d.%m.%Y')}\n"
        profile_text += f"üìä –°—Ç–∞—Ç—É—Å: {'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user.banned else '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n"
        
        if user.org_name:
            profile_text += f"\nüè¢ <b>–î–∞–Ω–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:</b>\n"
            profile_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user.org_name}\n"
            profile_text += f"–ò–ù–ù: {user.inn}\n"
            profile_text += f"–û–ì–†–ù: {user.ogrn}\n"
            profile_text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {user.phone}\n"
            profile_text += f"–§–ò–û: {user.fio}\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if user.role == "organizer":
            stmt = select(Tender).where(Tender.organizer_id == user.id)
            result = await session.execute(stmt)
            tenders = result.scalars().all()
            profile_text += f"\nüìã <b>–í–∞—à–∏ —Ç–µ–Ω–¥–µ—Ä—ã:</b> {len(tenders)}\n"
        
        elif user.role == "supplier":
            stmt = select(Tender).join(TenderParticipant).where(TenderParticipant.supplier_id == user.id)
            result = await session.execute(stmt)
            participated_tenders = result.scalars().all()
            profile_text += f"\nüèÜ <b>–£—á–∞—Å—Ç–∏–µ –≤ —Ç–µ–Ω–¥–µ—Ä–∞—Ö:</b> {len(participated_tenders)}\n"
        
        await message.answer(profile_text)

@router.message(Command("tenders"))
async def show_tenders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤"""
    async with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–Ω–¥–µ—Ä—ã
        stmt = select(Tender).order_by(Tender.created_at.desc())
        result = await session.execute(stmt)
        tenders = result.scalars().all()
        
        if not tenders:
            await message.answer("–¢–µ–Ω–¥–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        response = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–µ–Ω–¥–µ—Ä–æ–≤:</b>\n\n"
        for tender in tenders:
            status_emoji = {
                "draft": "üìù",
                "active": "üü¢",
                "closed": "üî¥",
                "cancelled": "‚ùå"
            }
            
            status_name = {
                "draft": "–ß–µ—Ä–Ω–æ–≤–∏–∫",
                "active": "–ê–∫—Ç–∏–≤–µ–Ω",
                "closed": "–ó–∞–≤–µ—Ä—à–µ–Ω",
                "cancelled": "–û—Ç–º–µ–Ω–µ–Ω"
            }
            
            response += (
                f"{status_emoji.get(tender.status, '‚ùì')} <b>{tender.title}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
                f"üìÖ –î–∞—Ç–∞: {tender.start_at.strftime('%d.%m.%Y %H:%M') if tender.start_at else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status_name.get(tender.status, tender.status)}\n"
                f"üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tender.participants)}\n"
                f"üìà –ó–∞—è–≤–æ–∫: {len(tender.bids)}\n\n"
            )
        
        await message.answer(response)

@router.message(Command("about"))
async def show_about(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""
    about_text = (
        "üèõÔ∏è <b>–°–∏—Å—Ç–µ–º–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã</b>\n\n"
        "ü§ñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        "–ë–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º–∏ "
        "—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–Ω–∏–∂–µ–Ω–∏–µ–º —Ü–µ–Ω—ã. –°–∏—Å—Ç–µ–º–∞ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –∏ "
        "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞–∫—É–ø–æ—á–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä.\n\n"
        
        "üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
        "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞–º–∏\n"
        "‚Ä¢ –ê—É–∫—Ü–∏–æ–Ω—ã –Ω–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã\n"
        "‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n"
        "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤\n"
        "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤\n"
        "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ —Ä–æ–ª—è–º–∏\n\n"
        
        "‚ö° <b>–ü—Ä–∏–Ω—Ü–∏–ø —Ä–∞–±–æ—Ç—ã:</b>\n"
        "1. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–µ—Ç —Ç–µ–Ω–¥–µ—Ä\n"
        "2. –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Ç—Å—è –∫ –∞—É–∫—Ü–∏–æ–Ω—É\n"
        "3. –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥–∞—é—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã\n"
        "4. –¢–æ—Ä–≥–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n"
        "5. –ü–æ–±–µ–∂–¥–∞–µ—Ç –Ω–∞–∏–º–µ–Ω—å—à–∞—è —Ü–µ–Ω–∞\n\n"
        
        "üì± <b>–í–µ—Ä—Å–∏—è:</b> 1.0.0\n"
        "üîß <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> AI Assistant\n"
        "üìÖ <b>–î–∞—Ç–∞:</b> 2024"
    )
    
    await message.answer(about_text)

@router.message(Command("rules"))
async def show_rules(message: Message):
    """–ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö"""
    rules_text = (
        "üìú <b>–ü—Ä–∞–≤–∏–ª–∞ —É—á–∞—Å—Ç–∏—è –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö</b>\n\n"
        "üéØ <b>–û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ\n"
        "‚Ä¢ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞–≤–Ω—ã –≤ –ø—Ä–∞–≤–∞—Ö\n"
        "‚Ä¢ –ê—É–∫—Ü–∏–æ–Ω—ã –ø—Ä–æ–≤–æ–¥—è—Ç—Å—è –Ω–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã\n\n"
        
        "‚è∞ <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –¢–æ—Ä–≥–∏ –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞—è–≤–∫–∏\n"
        "‚Ä¢ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n"
        "‚Ä¢ –ê—É–∫—Ü–∏–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏\n\n"
        
        "üí∞ <b>–ü—Ä–∞–≤–∏–ª–∞ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è:</b>\n"
        "‚Ä¢ –ö–∞–∂–¥–∞—è –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–∏–∂–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π\n"
        "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ: 10000.00 ‚ÇΩ\n"
        "‚Ä¢ –ü–æ–±–µ–∂–¥–∞–µ—Ç –Ω–∞–∏–º–µ–Ω—å—à–∞—è —Ü–µ–Ω–∞\n\n"
        
        "üë• <b>–ê–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å:</b>\n"
        "‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–∏ –≤–∏–¥—è—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∫–∞–∫ '–£—á–∞—Å—Ç–Ω–∏–∫ 1', '–£—á–∞—Å—Ç–Ω–∏–∫ 2' –∏ —Ç.–¥.\n"
        "‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π —Å–∫—Ä—ã—Ç—ã –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n"
        "‚Ä¢ –í –æ—Ç—á–µ—Ç–µ –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞—é—Ç—Å—è\n\n"
        
        "üèÜ <b>–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:</b>\n"
        "‚Ä¢ –ü–æ–±–µ–¥–∏—Ç–µ–ª–µ–º —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫ —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π —Ü–µ–Ω–æ–π\n"
        "‚Ä¢ –ü—Ä–∏ —Ä–∞–≤–Ω—ã—Ö —Ü–µ–Ω–∞—Ö –ø–æ–±–µ–∂–¥–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É —Ä–∞–Ω—å—à–µ\n"
        "‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–≤—è–∑—ã–≤–∞–µ—Ç—Å—è —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º\n\n"
        
        "‚ö†Ô∏è <b>–ó–∞–ø—Ä–µ—â–µ–Ω–æ:</b>\n"
        "‚Ä¢ –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–æ–∫ –≤—ã—à–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n"
        "‚Ä¢ –ù–∞—Ä—É—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n"
        "‚Ä¢ –õ—é–±—ã–µ —Ñ–æ—Ä–º—ã —Å–≥–æ–≤–æ—Ä–∞ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏"
    )
    
    await message.answer(rules_text)

@router.message(lambda message: message.text == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Å—Ç–∞—Ç—É—Å:",
        reply_markup=menu_main
    )

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    dp.include_router(router)
