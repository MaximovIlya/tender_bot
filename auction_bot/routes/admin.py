import asyncio
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from ..db import SessionLocal
from ..models import User, Tender, TenderStatus, Role
from ..keyboards import menu_admin
from ..config import settings

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–µ–π
class RoleAssignment(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_role = State()

@router.message(lambda message: message.text == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_users(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = message.from_user.id
    
    if user_id not in settings.ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    async with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        stmt = select(User).order_by(User.created_at.desc())
        result = await session.execute(stmt)
        users = result.scalars().all()
        
        if not users:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
            return
        
        response = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for user in users:
            role_emoji = {
                "admin": "üëë",
                "organizer": "üéØ",
                "supplier": "üè¢"
            }
            
            status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.banned else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
            registration = "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" if user.org_name else "üìù –ù–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
            
            response += (
                f"{role_emoji.get(user.role, '‚ùì')} <b>ID: {user.telegram_id}</b>\n"
                f"üë§ Username: @{user.username or '–ù–µ—Ç'}\n"
                f"üé≠ –†–æ–ª—å: {user.role}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
                f"üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {registration}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y')}\n"
            )
            
            if user.org_name:
                response += f"üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user.org_name}\n"
            
            response += "\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å", callback_data="assign_role")],
            [InlineKeyboardButton(text="–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data="toggle_ban")],
            [InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")]
        ])
        
        await message.answer(response, reply_markup=keyboard)

@router.message(lambda message: message.text == "–ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å")
async def start_role_assignment(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏"""
    user_id = message.from_user.id
    
    if user_id not in settings.ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await state.set_state(RoleAssignment.waiting_for_user_id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(RoleAssignment.waiting_for_user_id)
async def process_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        telegram_id = int(message.text)
        await state.update_data(telegram_id=telegram_id)
        await state.set_state(RoleAssignment.waiting_for_role)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ—Å—Ç–∞–≤—â–∏–∫", callback_data="role_supplier")],
            [InlineKeyboardButton(text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", callback_data="role_organizer")],
            [InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="role_admin")]
        ])
        
        await message.answer(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}:",
            reply_markup=keyboard
        )
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID (—á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")

@router.callback_query(lambda c: c.data.startswith("role_"))
async def assign_role(callback: CallbackQuery, state: FSMContext):
    """–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ä–æ–ª–∏"""
    role = callback.data.split("_")[1]
    user_data = await state.get_data()
    telegram_id = user_data['telegram_id']
    
    async with SessionLocal() as session:
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        stmt = select(User).where(User.telegram_id == telegram_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ä–æ–ª—å
        old_role = user.role
        user.role = role
        await session.commit()
        
        await callback.message.edit_text(
            f"‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {telegram_id}\n"
            f"üé≠ –°—Ç–∞—Ä–∞—è —Ä–æ–ª—å: {old_role}\n"
            f"üé≠ –ù–æ–≤–∞—è —Ä–æ–ª—å: {role}"
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await callback.bot.send_message(
                telegram_id,
                f"üéâ –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å: <b>{role}</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    await state.clear()

@router.callback_query(lambda c: c.data == "toggle_ban")
async def toggle_user_ban(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    if user_id not in settings.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:"
    )

@router.callback_query(lambda c: c.data == "show_stats")
async def show_system_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    user_id = callback.from_user.id
    
    if user_id not in settings.ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    async with SessionLocal() as session:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        stmt = select(User)
        result = await session.execute(stmt)
        users = result.scalars().all()
        
        total_users = len(users)
        suppliers = len([u for u in users if u.role == "supplier"])
        organizers = len([u for u in users if u.role == "organizer"])
        admins = len([u for u in users if u.role == "admin"])
        banned_users = len([u for u in users if u.banned])
        registered_suppliers = len([u for u in users if u.role == "supplier" and u.org_name])
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤
        stmt = select(Tender)
        result = await session.execute(stmt)
        tenders = result.scalars().all()
        
        total_tenders = len(tenders)
        draft_tenders = len([t for t in tenders if t.status == "draft"])
        active_tenders = len([t for t in tenders if t.status == "active"])
        closed_tenders = len([t for t in tenders if t.status == "closed"])
        
        stats_text = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"   ‚Ä¢ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: {suppliers}\n"
            f"   ‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã: {organizers}\n"
            f"   ‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admins}\n"
            f"   ‚Ä¢ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã: {banned_users}\n"
            f"   ‚Ä¢ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {registered_suppliers}\n\n"
            f"üìã –¢–µ–Ω–¥–µ—Ä—ã:\n"
            f"   ‚Ä¢ –í—Å–µ–≥–æ: {total_tenders}\n"
            f"   ‚Ä¢ –ß–µ—Ä–Ω–æ–≤–∏–∫–∏: {draft_tenders}\n"
            f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: {active_tenders}\n"
            f"   ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ: {closed_tenders}\n\n"
            f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        
        await callback.message.edit_text(stats_text)

@router.message(Command("admin"))
async def admin_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id
    
    if user_id not in settings.ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=menu_admin)

@router.message(Command("system_info"))
async def system_info(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    user_id = message.from_user.id
    
    if user_id not in settings.ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    info_text = (
        "üîß –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n\n"
        f"ü§ñ –í–µ—Ä—Å–∏—è –±–æ—Ç–∞: 1.0.0\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: SQLite\n"
        f"üîë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {len(settings.ADMIN_IDS)}\n"
        f"üìÅ –ü–∞–ø–∫–∞ —Ñ–∞–π–ª–æ–≤: {settings.FILES_DIR}\n\n"
        f"üìã –§—É–Ω–∫—Ü–∏–∏:\n"
        f"   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞–º–∏\n"
        f"   ‚Ä¢ –ê—É–∫—Ü–∏–æ–Ω—ã –Ω–∞ –ø–æ–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã\n"
        f"   ‚Ä¢ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤\n"
        f"   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤\n"
        f"   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤\n"
        f"   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"
    )
    
    await message.answer(info_text)

@router.message(lambda message: message.text == "–û–¥–æ–±—Ä–∏—Ç—å —Ç–µ–Ω–¥–µ—Ä")
async def approve_tender(message: Message):
    user_id = message.from_user.id

    async with SessionLocal() as session:
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if user_id not in settings.ADMIN_IDS:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∏
        stmt = select(Tender).where(Tender.status == TenderStatus.draft.value)
        result = await session.execute(stmt)
        drafts = result.scalars().all()

        if not drafts:
            await message.answer("–ù–µ—Ç —Ç–µ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è.")
            return

        response = "üìù –¢–µ–Ω–¥–µ—Ä—ã –≤ —á–µ—Ä–Ω–æ–≤–∏–∫–∞—Ö:\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for t in drafts:
            response += f"{t.id}: {t.title} | –ù–∞—á–∞–ª–æ: {t.start_at.strftime('%d.%m.%Y %H:%M')}\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"–û–¥–æ–±—Ä–∏—Ç—å '{t.title}'",
                    callback_data=f"approve_tender_{t.id}"
                )
            ])

        await message.answer(response, reply_markup=keyboard)

@router.message(lambda message: message.text == "–°—Ç–∞—Ç—É—Å —Ç–µ–Ω–¥–µ—Ä–æ–≤")
async def show_tender_statuses(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤"""
    user_id = message.from_user.id

    if user_id not in settings.ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
        return

    async with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–µ–Ω–¥–µ—Ä—ã —Å –∏—Ö —Å—Ç–∞—Ç—É—Å–∞–º–∏
        stmt = select(Tender).order_by(Tender.created_at.desc())
        result = await session.execute(stmt)
        tenders = result.scalars().all()

        if not tenders:
            await message.answer("–ù–µ—Ç —Ç–µ–Ω–¥–µ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        response = "üìä –°—Ç–∞—Ç—É—Å—ã —Ç–µ–Ω–¥–µ—Ä–æ–≤:\n\n"
        
        for t in tenders:
            status_emoji = {
                TenderStatus.draft.value: "üìù",
                TenderStatus.active_pending.value: "‚è≥",
                TenderStatus.active.value: "üü¢",
                TenderStatus.closed.value: "üî¥",
                TenderStatus.cancelled.value: "‚ùå"
            }.get(t.status, "‚ùì")
            
            status_text = {
                TenderStatus.draft.value: "–ß–µ—Ä–Ω–æ–≤–∏–∫",
                TenderStatus.active_pending.value: "–û–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
                TenderStatus.active.value: "–ê–∫—Ç–∏–≤–µ–Ω",
                TenderStatus.closed.value: "–ó–∞–≤–µ—Ä—à–µ–Ω",
                TenderStatus.cancelled.value: "–û—Ç–º–µ–Ω–µ–Ω"
            }.get(t.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            
            response += (
                f"{status_emoji} <b>{t.title}</b>\n"
                f"   ID: {t.id}\n"
                f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"
                f"   –ù–∞—á–∞–ª–æ: {t.start_at.strftime('%d.%m.%Y %H:%M') if t.start_at else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"   –°–æ–∑–¥–∞–Ω: {t.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )

        await message.answer(response)


@router.callback_query(lambda c: c.data.startswith("approve_tender_"))
async def process_approve_tender(callback: CallbackQuery):
    tender_id = int(callback.data.split("_")[-1])

    async with SessionLocal() as session:
        tender = await session.get(Tender, tender_id)
        if not tender:
            await callback.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        # –¢–µ–Ω–¥–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å—Ç–∞—Ç—É—Å "–æ–∂–∏–¥–∞—é—â–∏–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"
        tender.status = TenderStatus.active_pending.value
        await session.commit()

    await callback.message.edit_text(f"‚úÖ –¢–µ–Ω–¥–µ—Ä '{tender.title}' –æ–¥–æ–±—Ä–µ–Ω! –û–Ω –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ {tender.start_at.strftime('%d.%m.%Y %H:%M')}")

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    dp.include_router(router)
