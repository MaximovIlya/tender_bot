import asyncio
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from sqlalchemy import select, and_
from sqlalchemy.ext.asyncio import AsyncSession

from ..db import SessionLocal
from ..models import User, Tender, TenderStatus, Bid, TenderParticipant
from ..services.timers import AuctionTimer
from ..services.reports import ReportService

router = Router()

@router.message(Command("check_auctions"))
async def check_auctions(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
    async with SessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã
        stmt = select(Tender).where(Tender.status == TenderStatus.active.value)
        result = await session.execute(stmt)
        active_tenders = result.scalars().all()
        
        if not active_tenders:
            await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç.")
            return
        
        response = "üü¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∞—É–∫—Ü–∏–æ–Ω—ã:\n\n"
        for tender in active_tenders:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è
            time_since_last_bid = None
            if tender.last_bid_at:
                time_since_last_bid = datetime.now() - tender.last_bid_at
            
            status = "‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫"
            if time_since_last_bid and time_since_last_bid > timedelta(minutes=5):
                status = "üî¥ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ"
            elif tender.last_bid_at:
                status = f"üü° –ê–∫—Ç–∏–≤–µ–Ω ({5 - time_since_last_bid.seconds // 60} –º–∏–Ω)"
            
            response += (
                f"üìã <b>{tender.title}</b>\n"
                f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
                f"üìÖ –ù–∞—á–∞–ª–æ: {tender.start_at.strftime('%d.%m.%Y %H:%M')}\n"
                f"üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tender.participants)}\n"
                f"üìà –ó–∞—è–≤–æ–∫: {len(tender.bids)}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
            )
        
        await message.answer(response)

@router.message(Command("close_expired_auctions"))
async def close_expired_auctions(message: Message):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        user = await session.get(User, user_id)
        if not user or user.role not in ["admin", "organizer"]:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∞—É–∫—Ü–∏–æ–Ω–æ–≤.")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ –∞—É–∫—Ü–∏–æ–Ω—ã
        expired_tenders = []
        stmt = select(Tender).where(Tender.status == TenderStatus.active.value)
        result = await session.execute(stmt)
        active_tenders = result.scalars().all()
        
        for tender in active_tenders:
            if tender.last_bid_at and datetime.now() - tender.last_bid_at > timedelta(minutes=5):
                expired_tenders.append(tender)
        
        if not expired_tenders:
            await message.answer("–ò—Å—Ç–µ–∫—à–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤ –Ω–µ—Ç.")
            return
        
        closed_count = 0
        for tender in expired_tenders:
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–Ω–¥–µ—Ä
            tender.status = TenderStatus.closed.value
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if tender.bids:
                winner_bid = min(tender.bids, key=lambda x: x.amount)
                winner = await session.get(User, winner_bid.supplier_id)
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                try:
                    await message.bot.send_message(
                        winner.telegram_id,
                        f"üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ —Ç–µ–Ω–¥–µ—Ä!\n\n"
                        f"üìã {tender.title}\n"
                        f"üí∞ –í–∞—à–∞ —Ü–µ–Ω–∞: {winner_bid.amount} ‚ÇΩ\n"
                        f"üìÖ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {winner_bid.created_at.strftime('%H:%M:%S')}\n\n"
                        f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
                organizer = await session.get(User, tender.organizer_id)
                try:
                    await message.bot.send_message(
                        organizer.telegram_id,
                        f"üî¥ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                        f"üìã {tender.title}\n"
                        f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner.org_name}\n"
                        f"üí∞ –¶–µ–Ω–∞: {winner_bid.amount} ‚ÇΩ\n"
                        f"üìÖ –í—Ä–µ–º—è: {winner_bid.created_at.strftime('%H:%M:%S')}\n\n"
                        f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É: {e}")
            
            closed_count += 1
        
        await session.commit()
        
        await message.answer(
            f"‚úÖ –ó–∞–∫—Ä—ã—Ç–æ {closed_count} –∏—Å—Ç–µ–∫—à–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤.\n\n"
            f"–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã."
        )

@router.message(Command("auction_report"))
async def generate_auction_report(message: Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∞—É–∫—Ü–∏–æ–Ω—É"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user or user.role not in ["admin", "organizer"]:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ—Ä—ã
        stmt = select(Tender).where(Tender.status == TenderStatus.closed.value)
        result = await session.execute(stmt)
        closed_tenders = result.scalars().all()
        
        if not closed_tenders:
            await message.answer("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–µ—Ç.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–Ω–¥–µ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for tender in closed_tenders:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{tender.title} - {tender.current_price} ‚ÇΩ",
                    callback_data=f"report_tender_{tender.id}"
                )
            ])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–Ω–¥–µ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:",
            reply_markup=keyboard
        )

@router.callback_query(lambda c: c.data.startswith("report_tender_"))
async def generate_tender_report(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ–Ω–¥–µ—Ä—É"""
    tender_id = int(callback.data.split("_")[2])
    
    async with SessionLocal() as session:
        tender = await session.get(Tender, tender_id)
        if not tender:
            await callback.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
        stmt = select(Bid).where(Bid.tender_id == tender_id).order_by(Bid.created_at)
        result = await session.execute(stmt)
        bids = result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        stmt = select(TenderParticipant).where(TenderParticipant.tender_id == tender_id)
        result = await session.execute(stmt)
        participants = result.scalars().all()
        
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        report_text = f"üìä –û–¢–ß–ï–¢ –ü–û –ê–£–ö–¶–ò–û–ù–£\n\n"
        report_text += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {tender.title}\n"
        report_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tender.description}\n"
        report_text += f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {tender.start_price} ‚ÇΩ\n"
        report_text += f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {tender.start_at.strftime('%d.%m.%Y %H:%M')}\n"
        report_text += f"üèÜ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}\n"
        report_text += f"üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫: {len(bids)}\n\n"
        
        if bids:
            report_text += "üìà –•–û–î –¢–û–†–ì–û–í:\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞—è–≤–∫–∏ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
            participant_map = {}
            for i, participant in enumerate(participants):
                participant_map[participant.supplier_id] = f"–£—á–∞—Å—Ç–Ω–∏–∫ {i+1}"
            
            for i, bid in enumerate(bids):
                participant_name = participant_map.get(bid.supplier_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                report_text += (
                    f"{i+1}. {participant_name}\n"
                    f"   üí∞ –¶–µ–Ω–∞: {bid.amount} ‚ÇΩ\n"
                    f"   üìÖ –í—Ä–µ–º—è: {bid.created_at.strftime('%H:%M:%S')}\n\n"
                )
            
            # –ü–æ–±–µ–¥–∏—Ç–µ–ª—å
            winner_bid = min(bids, key=lambda x: x.amount)
            winner = await session.get(User, winner_bid.supplier_id)
            report_text += (
                f"üèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨:\n"
                f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {winner.org_name}\n"
                f"üí∞ –¶–µ–Ω–∞: {winner_bid.amount} ‚ÇΩ\n"
                f"üìÖ –í—Ä–µ–º—è –ø–æ–¥–∞—á–∏: {winner_bid.created_at.strftime('%H:%M:%S')}\n"
                f"üìâ –≠–∫–æ–Ω–æ–º–∏—è: {tender.start_price - winner_bid.amount} ‚ÇΩ"
            )
        else:
            report_text += "üìä –ó–∞—è–≤–æ–∫ –Ω–µ –±—ã–ª–æ –ø–æ–¥–∞–Ω–æ."
        
        await callback.message.edit_text(report_text)

@router.message(Command("auto_close_check"))
async def auto_close_check(message: Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∞—É–∫—Ü–∏–æ–Ω–æ–≤"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user or user.role not in ["admin", "organizer"]:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è.")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        await close_expired_auctions(message)

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    dp.include_router(router)
