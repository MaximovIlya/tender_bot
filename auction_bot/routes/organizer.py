import asyncio
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from ..db import SessionLocal
from ..models import User, Tender, TenderStatus, TenderParticipant, TenderAccess
from ..keyboards import menu_organizer
from ..services.timers import AuctionTimer

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–∞
class TenderCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_description = State()
    waiting_for_start_price = State()
    waiting_for_start_date = State()
    waiting_for_conditions = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ç–µ–Ω–¥–µ—Ä–∞–º
class AccessManagement(StatesGroup):
    selecting_tender = State()
    selecting_suppliers = State()

@router.message(lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä")
async def start_tender_creation(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–∞"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user or user.role != "organizer":
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
            return
    
    await state.set_state(TenderCreation.waiting_for_title)
    await message.answer(
        "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–Ω–¥–µ—Ä–∞\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞:",
        reply_markup=ReplyKeyboardRemove()
    )

@router.message(TenderCreation.waiting_for_title)
async def process_tender_title(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–∞"""
    await state.update_data(title=message.text)
    await state.set_state(TenderCreation.waiting_for_description)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–Ω–¥–µ—Ä–∞:")

@router.message(TenderCreation.waiting_for_description)
async def process_tender_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–Ω–¥–µ—Ä–∞"""
    await state.update_data(description=message.text)
    await state.set_state(TenderCreation.waiting_for_start_price)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):")

@router.message(TenderCreation.waiting_for_start_price)
async def process_tender_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ü–µ–Ω—ã"""
    try:
        price = float(message.text.replace(',', '.'))
        if price <= 0:
            await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(start_price=price, current_price=price)
    await state.set_state(TenderCreation.waiting_for_start_date)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∞—É–∫—Ü–∏–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 14:00"
    )

@router.message(TenderCreation.waiting_for_start_date)
async def process_tender_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        if start_date <= datetime.now():
            await message.answer("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
            return
    except ValueError:
        await message.answer(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return
    
    await state.update_data(start_at=start_date)
    await state.set_state(TenderCreation.waiting_for_conditions)
    await message.answer(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å —É—Å–ª–æ–≤–∏—è–º–∏ —Ç–µ–Ω–¥–µ—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç':"
    )

@router.message(TenderCreation.waiting_for_conditions)
async def process_tender_conditions(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ª–æ–≤–∏–π —Ç–µ–Ω–¥–µ—Ä–∞"""
    user_data = await state.get_data()
    user_id = message.from_user.id
    
    conditions_path = None
    if message.document:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file_path = f"files/tender_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        await message.bot.download(message.document, file_path)
        conditions_path = file_path
    elif message.text.strip().lower() != "–Ω–µ—Ç":
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç':")
        return

    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–¥–µ—Ä
    async with SessionLocal() as session:
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
    
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            return
        
        tender = Tender(
            title=user_data['title'],
            description=user_data['description'],
            start_price=user_data['start_price'],
            current_price=user_data['current_price'],
            start_at=user_data['start_at'],
            conditions_path=conditions_path,
            organizer_id=user.id,
            status=TenderStatus.draft.value  
        )
                
        session.add(tender)
        await session.commit()
        
        await message.answer(
            f"‚úÖ –¢–µ–Ω–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {tender.title}\n"
            f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {tender.start_price} ‚ÇΩ\n"
            f"üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {tender.start_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tender.description}\n\n"
            f"–¢–µ–Ω–¥–µ—Ä –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–µ–Ω —Å {tender.start_at.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=menu_organizer
        )
    
    await state.clear()



@router.message(F.text == "–ú–æ–∏ —Ç–µ–Ω–¥–µ—Ä—ã")
async def show_my_tenders(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–Ω–¥–µ—Ä—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    user_id = message.from_user.id

    async with SessionLocal() as session:
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if not user or user.role != "organizer":
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–Ω–¥–µ—Ä—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ —Å—Ä–∞–∑—É —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –∑–∞—è–≤–∫–∞–º–∏
        stmt = (
            select(Tender)
            .where(Tender.organizer_id == user.id)
            .options(
                selectinload(Tender.participants),
                selectinload(Tender.bids),
            )
            .order_by(Tender.created_at.desc())
        )
        result = await session.execute(stmt)
        tenders = result.scalars().all()

        if not tenders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–Ω–¥–µ—Ä–æ–≤.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = "üìã –í–∞—à–∏ —Ç–µ–Ω–¥–µ—Ä—ã:\n\n"
        for tender in tenders:
            status_emoji = {
                "draft": "üìù",
                "active": "üü¢",
                "closed": "üî¥",
                "cancelled": "‚ùå",
            }

            response += (
                f"{status_emoji.get(tender.status, '‚ùì')} <b>{tender.title}</b>\n"
                f"üí∞ –¶–µ–Ω–∞: {tender.current_price} ‚ÇΩ\n"
                f"üìÖ –î–∞—Ç–∞: {tender.start_at.strftime('%d.%m.%Y %H:%M') if tender.start_at else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {tender.status}\n"
                f"üèÜ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tender.participants)}\n"
                f"üìà –ó–∞—è–≤–æ–∫: {len(tender.bids)}\n\n"
            )

        await message.answer(response, reply_markup=menu_organizer)

@router.message(Command("start_auction"))
async def start_auction(message: Message):
    """–ó–∞–ø—É—Å–∫ –∞—É–∫—Ü–∏–æ–Ω–∞"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        user = await session.get(User, user_id)
        if not user or user.role != "organizer":
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—É–∫—Ü–∏–æ–Ω–æ–≤.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫–∏ —Ç–µ–Ω–¥–µ—Ä–æ–≤
        stmt = select(Tender).where(
            Tender.organizer_id == user.id,
            Tender.status == TenderStatus.draft
        )
        result = await session.execute(stmt)
        draft_tenders = result.scalars().all()
        
        if not draft_tenders:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫–æ–≤ —Ç–µ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–Ω–¥–µ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for tender in draft_tenders:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{tender.title} - {tender.start_price} ‚ÇΩ",
                    callback_data=f"start_tender_{tender.id}"
                )
            ])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–Ω–¥–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞:",
            reply_markup=keyboard
        )

@router.callback_query(lambda c: c.data.startswith("start_tender_"))
async def process_start_tender(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ–Ω–¥–µ—Ä–∞"""
    tender_id = int(callback.data.split("_")[2])
    
    async with SessionLocal() as session:
        tender = await session.get(Tender, tender_id)
        if not tender:
            await callback.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        if tender.status != TenderStatus.draft:
            await callback.answer("–¢–µ–Ω–¥–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω.")
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–Ω–¥–µ—Ä
        tender.status = TenderStatus.active.value
        await session.commit()
        
        await callback.message.edit_text(
            f"‚úÖ –ê—É–∫—Ü–∏–æ–Ω –∑–∞–ø—É—â–µ–Ω!\n\n"
            f"üìã {tender.title}\n"
            f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: {tender.start_price} ‚ÇΩ\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: {tender.start_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∑–∞—è–≤–∫–∏!"
        )

@router.message(F.text == "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º")
async def start_access_management(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ç–µ–Ω–¥–µ—Ä–∞–º"""
    user_id = message.from_user.id
    
    async with SessionLocal() as session:
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user or user.role != "organizer":
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ç–µ–Ω–¥–µ—Ä–∞–º.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–Ω–¥–µ—Ä—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
        stmt = (
            select(Tender)
            .where(Tender.organizer_id == user.id)
            .order_by(Tender.created_at.desc())
        )
        result = await session.execute(stmt)
        tenders = result.scalars().all()
        
        if not tenders:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ–Ω–¥–µ—Ä–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–Ω–¥–µ—Ä–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for tender in tenders:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{tender.title} ({tender.status})",
                    callback_data=f"manage_access_{tender.id}"
                )
            ])
        
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–Ω–¥–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º:",
            reply_markup=keyboard
        )

@router.callback_query(lambda c: c.data.startswith("manage_access_"))
async def manage_tender_access(callback: CallbackQuery, state: FSMContext = None):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç–µ–Ω–¥–µ—Ä—É"""
    tender_id = int(callback.data.split("_")[2])
    user_id = callback.from_user.id
    
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user or user.role != "organizer":
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–Ω–¥–µ—Ä
        tender = await session.get(Tender, tender_id)
        if not tender or tender.organizer_id != user.id:
            await callback.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        stmt = select(User).where(User.role == "supplier", User.org_name.isnot(None))
        result = await session.execute(stmt)
        suppliers = result.scalars().all()
        
        if not suppliers:
            await callback.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        stmt = select(TenderAccess).where(TenderAccess.tender_id == tender_id)
        result = await session.execute(stmt)
        current_access = result.scalars().all()
        current_supplier_ids = {access.supplier_id for access in current_access}
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for supplier in suppliers:
            status = "‚úÖ" if supplier.id in current_supplier_ids else "‚ùå"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(
                    text=f"{status} {supplier.org_name}",
                    callback_data=f"toggle_access_{tender_id}_{supplier.id}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É",
                callback_data=f"finish_access_{tender_id}"
            )
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = f"üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ç–µ–Ω–¥–µ—Ä—É\n\n"
        response += f"üìã <b>{tender.title}</b>\n"
        response += f"üìä –°—Ç–∞—Ç—É—Å: {tender.status}\n"
        response += f"üë• –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω: {len(current_supplier_ids)} –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º\n\n"
        response += f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø:\n"
        response += f"‚úÖ - –¥–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω\n"
        response += f"‚ùå - –¥–æ—Å—Ç—É–ø –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω\n\n"
        response += f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞."
        
        try:
            await callback.message.edit_text(response, reply_markup=keyboard)
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ manage_tender_access: {e}")
            await callback.message.answer(response, reply_markup=keyboard)

@router.callback_query(lambda c: c.data.startswith("toggle_access_"))
async def toggle_supplier_access(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –∫ —Ç–µ–Ω–¥–µ—Ä—É"""
    parts = callback.data.split("_")
    tender_id = int(parts[2])
    supplier_id = int(parts[3])
    user_id = callback.from_user.id
    
    async with SessionLocal() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        stmt = select(User).where(User.telegram_id == user_id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()
        if not user or user.role != "organizer":
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–Ω–¥–µ—Ä
        tender = await session.get(Tender, tender_id)
        if not tender or tender.organizer_id != user.id:
            await callback.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–æ—Å—Ç—É–ø
        stmt = select(TenderAccess).where(
            TenderAccess.tender_id == tender_id,
            TenderAccess.supplier_id == supplier_id
        )
        result = await session.execute(stmt)
        existing_access = result.scalar_one_or_none()
        
        if existing_access:
            # –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç—É–ø
            await session.delete(existing_access)
            action = "–æ—Ç–æ–∑–≤–∞–Ω"
        else:
            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø
            access = TenderAccess(
                tender_id=tender_id,
                supplier_id=supplier_id
            )
            session.add(access)
            action = "–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        
        await session.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        supplier = await session.get(User, supplier_id)
        if supplier:
            await callback.answer(f"–î–æ—Å—Ç—É–ø {action} –¥–ª—è {supplier.org_name}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await manage_tender_access(callback, None)

@router.callback_query(lambda c: c.data.startswith("finish_access_"))
async def finish_access_management(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º"""
    try:
        tender_id = int(callback.data.split("_")[2])
        user_id = callback.from_user.id
        print(f"DEBUG: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
    except Exception as e:
        print(f"DEBUG: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ callback data: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        return
    
    try:
        async with SessionLocal() as session:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
            stmt = select(User).where(User.telegram_id == user_id)
            result = await session.execute(stmt)
            user = result.scalar_one_or_none()
            if not user or user.role != "organizer":
                await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–º.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–Ω–¥–µ—Ä
            tender = await session.get(Tender, tender_id)
            if not tender or tender.organizer_id != user.id:
                await callback.answer("–¢–µ–Ω–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤
            stmt = select(TenderAccess).where(TenderAccess.tender_id == tender_id)
            result = await session.execute(stmt)
            access_count = len(result.scalars().all())
            
            print(f"DEBUG: –ù–∞–π–¥–µ–Ω–æ {access_count} –¥–æ—Å—Ç—É–ø–æ–≤ –¥–ª—è —Ç–µ–Ω–¥–µ—Ä–∞ {tender_id}")
            
            try:
                await callback.message.edit_text(
                    f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üìã –¢–µ–Ω–¥–µ—Ä: {tender.title}\n"
                    f"üë• –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω: {access_count} –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º\n\n"
                    f"–¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —ç—Ç–æ—Ç —Ç–µ–Ω–¥–µ—Ä.",
                    reply_markup=menu_organizer
                )
            except Exception as e:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await callback.message.answer(
                    f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    f"üìã –¢–µ–Ω–¥–µ—Ä: {tender.title}\n"
                    f"üë• –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω: {access_count} –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º\n\n"
                    f"–¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∏ —Å–º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —ç—Ç–æ—Ç —Ç–µ–Ω–¥–µ—Ä.",
                    reply_markup=menu_organizer
                )
    except Exception as e:
        print(f"DEBUG: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ finish_access_management: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–∞.")

def register_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤"""
    dp.include_router(router)
